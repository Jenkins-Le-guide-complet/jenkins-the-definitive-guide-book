<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="chapter-build-jobs">
  <title>Configurer vos tâches de Build</title>
  <sect1 id="sect-build-jobs-introduction">
    <title>Introduction</title>
    <para><indexterm id="I_indexterm5_d1e4965" significance="normal"><primary>tâches de build</primary></indexterm>Les tâches de build sont les éléments de base d'un serveur
        d'Intégration Continue.</para>
    <para>Une tâche de build est une manière de compiler, tester, empaqueter,
        déployer ou d'effectuer des actions sur votre projet. Les tâches de build
        apparaissent sous plusieurs formes ; vous pouvez compiler et tester unitairement
        votre application, créer des rapports qualimétriques pour votre code source,
        générer de la documentation, empaqueter une application pour une livraison,
        la déployer en environnement de production, exécuter un test de fumée automatisé
        ou n'importe quelles autres tâches similaires.</para>
    <para>Un projet logiciel aura généralement plusieurs tâches de build attachées.
        Vous pourriez démarrer avec une tâche de build dédiée qui exécute tous les tests unitaires
        par exemple. Si ceux-ci se terminent avec succès, vous pourriez poursuivre
        avec une tâche de build exécutant des tests d'intégration plus longs, faire tourner la
        qualimétrie sur le code ou générer la documentation technique avant d'<phrase role="keep-together">empaqueter</phrase> votre application
        web pour la déployer sur un serveur de test.</para>
    <para>Dans Jenkins, les tâches de build sont simples à configurer.  Dans ce
        chapitre, nous verrons les différents types de tâches de build et la manière de les
        configurer. Dans les chapitres suivants, nous irons plus loin en regardant
        comment organiser plusieurs tâches de build, comment configurer un séquençage
        pour la promotion de builds et comment automatiser la procédure de
        déploiement. Démarrons pour l'instant avec la manière de configurer une
        tâche basique de build dans Jenkins.</para>
  </sect1>
  <sect1 id="sect-build-jobs">
    <title>Tâches de Build Jenkins</title>
    <para>Créer des<indexterm class="startofrange" id="ch05-create" significance="normal"><primary>tâches de build</primary><secondary>créer</secondary></indexterm> une nouvelle tâche de build dans Jenkins est simple : cliquez simplement sur
        le lien “Nouveau Job” du menu dans le tableau de bord de Jenkins. Jenkins supporte différents
        <indexterm id="I_indexterm5_d1e4989" significance="normal"><primary>tâches de build</primary><secondary>types de</secondary></indexterm><indexterm id="I_indexterm5_d1e4994" significance="normal"><primary>tâches de build</primary><seealso>tâches de build free-style; tâches de build Apache Maven</seealso></indexterm> types de tâches de build qui vous sont présentés lorsque vous choisissez de créer
        un nouveau job (voir <xref linkend="fig-hudson-build-types"/>).</para>
    <variablelist>
      <varlistentry>
        <term>Projet free-style</term>
        <listitem>
          <para><indexterm id="I_indexterm5_d1e5008" significance="normal"><primary>tâches de build free-style</primary></indexterm>Les tâches de build free-style sont des tâches de build générales
          apportant une grande flexibilité.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Projet Apache Maven</term>
        <listitem>
          <para><indexterm id="I_indexterm5_d1e5017" significance="normal"><primary>tâches de build Apache Maven</primary></indexterm>Le “projet maven2/3” est une tâche de build spécialement
              adaptée aux projets Apache Maven. Jenkins comprend les fichiers <filename moreinfo="none">pom</filename> et la structure des projets Apache Maven et peut
              utiliser les informations glanées dans le fichier <filename moreinfo="none">pom</filename> pour réduire les efforts de configuration nécessaires
              à la configuration de votre projet.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Contrôler un job externe</term>
        <listitem>
          <para><indexterm id="I_indexterm5_d1e5032" significance="normal"><primary>tâches de build</primary><secondary>externe, contrôler</secondary></indexterm><indexterm id="I_indexterm5_d1e5037" significance="normal"><primary>jobs externes, contrôler</primary></indexterm>La tache de build “Contrôler un job externe” vous permet de
              garder un oeil sur des processus non-interactifs externes comme <indexterm id="I_indexterm5_d1e5041" significance="normal"><primary>tâches cron</primary><see>jobs externes</see></indexterm>des tâches cron.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Projet multi-configuration</term>
        <listitem>
          <para><indexterm id="I_indexterm5_d1e5052" significance="normal"><primary>tâches de build multi-configuration</primary></indexterm><indexterm id="I_indexterm5_d1e5055" significance="normal"><primary>tâches de build matrix</primary><see>tâches de build multi-configuration</see></indexterm>Le “projet multi-configuration” (également référencé comme
              “projet matrix”) vous permet de faire tourner la même tâche de build avec différentes configurations.
              Cette puissante fonctionnalité peut être utile pour tester une application
              dans des environnements différents, avec différentes bases de données ou
              même sur différentes machines de build. Nous regarderons plus en détails la manière
              de configurer ces tâches de build multi-configuration plus loin dans ce livre.</para>
        </listitem>
      </varlistentry>
    </variablelist>
    <figure float="0" id="fig-hudson-build-types">
      <title>Jenkins supporte quatre principaux types de tâches de build</title>
      <mediaobject id="I_mediaobject5_d1e5064">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0501.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0501.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>Vous <indexterm id="I_indexterm5_d1e5071" significance="normal"><primary>tâches de build</primary><secondary>copier</secondary></indexterm>pouvez également copier un job existant ce qui est une très bonne façon
        de créer un nouveau job avec une configuration très similaire à une tâche de build existante,
        à l'exception de quelques détails de configuration.</para>
    <para>Dans ce chapitre, nous nous concentrerons sur les deux premiers types de tâches de build
        qui sont les plus couramment utilisées. Les autres seront discutés plus loin.
        Démarrons avec l'option la plus flexible : la<indexterm id="I_indexterm5_d1e5079" class="endofrange" startref="ch05-create" significance="normal"><primary/></indexterm> tâche de build free-style.</para>
  </sect1>
  <sect1 id="sect-build-jobs-freestyle">
    <title>Créer une tâche de build free-style</title>
    <para>La <indexterm class="startofrange" id="ch05-free" significance="normal"><primary>tâches de build free-style</primary></indexterm>tâche de build free-style est l'option la
        plus flexible et la plus configurable et peut être utilisée pour n'importe quel type de projet. Elle est assez rapide à mettre en place et la plupart des
        options de configuration vues ici sont également disponible dans les autres
        types de tâches de build.</para>
    <sect2 id="sect-general-options">
      <title>Options Générales</title>
      <para>La première section que vous voyez lorsque vous créez un job de type
          free-style contient les informations générales du projet comme son nom
          unique ou sa description ainsi que d'autres indiquant comment et où la
          tâche de build doit être exécutée (voir <xref linkend="fig-hudson-new-project-general"/>).</para>
      <figure float="none" id="fig-hudson-new-project-general">
        <title>Créer une nouvelle tâche de build</title>
        <mediaobject id="I_mediaobject5_d1e5101">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0502.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0502.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Le <indexterm id="I_indexterm5_d1e5108" significance="normal"><primary>tâches de build free-style</primary><secondary>nommage</secondary></indexterm>nom du projet peut être n'importe lequel mais il
          est bon de noter qu'il sera utilisé comme repertoire du projet et dans les URLs du job. J'évite donc généralement d'utiliser des
          noms avec des espaces. La <indexterm id="I_indexterm5_d1e5114" significance="normal"><primary>tâche de build free-style</primary><secondary>description de, pour la page de démarrage du projet</secondary></indexterm>description du projet
          apparaîtra sur la page de démarrage du projet — utilisez la pour
          donner une idée générale sur le but de la tâche de build et son contexte. Les tags
          HTML y sont acceptés.</para>
      <para>Les autres options sont plus techniques et nous reviendrons sur
          quelques unes plus en détails dans la suite de ce guide.</para>
      <para>Un<indexterm id="I_indexterm5_d1e5124" significance="normal"><primary>tâches de build free-style</primary><secondary>historique de build pour, nombre de builds à conserver</secondary></indexterm><indexterm id="I_indexterm5_d1e5129" significance="normal"><primary>historique de build</primary><secondary>nombre de builds à conserver</secondary></indexterm> des aspects importants est la manière dont vous allez gérer l'historique
          de vos builds. Les tâches de build peuvent consommer beaucoup d'espace disque particulièrement
          si vous archivez les artefacts de vos builds (les fichiers binaires tels que JARs,
          WARs, TARs, etc. générés par votre tâche de build). Même sans artefacts, garder un
          enregistrement pour chaque tâche de build consomme de la mémoire et de l'espace disque
          supplémentaire et cela n'est peut être pas justifié selon la nature de votre tâche de build.
          Par exemple, pour un job de qualimétrie générant des rapports sur
          l'analyse statique et la couverture de votre code dans le temps, vous pourriez
          vouloir garder une trace de vos builds pendant toute la durée du projet. Cependant,
          pour une tâche de build qui déploie automatiquement une application sur un serveur de test,
          garder un historique et les artefacts pour la postérité est peut être beaucoup
          moins important.</para>
      <para>L'option de suppression des anciens builds vous permet de limiter le nombre
          de builds conservés dans l'historique. Vous pouvez aussi bien demander à
          Jenkins de ne garder que les builds récents (Jenkins supprimera les builds après
          un certain nombre de jours) ou ne garder pas plus qu'un nombre déterminé de builds.
          Si un build en particulier a une valeur sentimentale pour vous, vous pouvez
          toujours demander à Jenkins de le conserver à tout jamais en utilisant le bouton
          de conservation sans limite de temps sur la page de détails du build (voir <xref linkend="fig-jenkins-keep-forever"/>).
          Notez que ce bouton n'apparaitra seulement que si vous avez demandé à Jenkins de
          supprimer les anciens builds.</para>
      <figure float="0" id="fig-jenkins-keep-forever">
        <title>Conserver un build sans limite de temps</title>
        <mediaobject id="I_mediaobject5_d1e5142">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0503.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0503.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>En plus de cela, Jenkins ne supprimera jamais le dernier build stable qui
          s'est terminé avec succès, peu importe son ancienneté. Par exemple, si vous limitez
          Jenkins pour ne conserver que les vingt derniers builds et que votre dernier build
          qui s'est terminé avec succès s'est exécuté trente builds plus tôt, Jenkins
          le conservera en plus des vingt derniers builds échoués.</para>
      <para>Vous<indexterm id="I_indexterm5_d1e5151" significance="normal"><primary>tâches de build free-style</primary><secondary>désactiver</secondary></indexterm> avez aussi la
          possibilité de désactiver une tâche. Une tâche désactivée ne sera pas exécutée tant que
          vous ne l'aurez pas réactivé. Utiliser cette option lorsque vous venez de créer
          votre job est cependant assez rare. D'un autre côté, cette option est souvent utile
          lorsque vous devez suspendre temporairement une tâche pendant une maintenance ou une
          grande refactorisation du projet et plus généralement lorsqu'une notification d'echec
          de la tâche de build ne sera pas utile à l'équipe.</para>
    </sect2>
    <sect2>
      <title>Options avancées du projet</title>
      <para>Les options avancées du projet contiennent, comme l'indique le
          nom de cette section, des options de configuration moins courantes.
          Vous devrez cliquer sur le bouton Avancé pour les faire apparaitre.
          (voir <xref linkend="fig-hudson-new-project-advanced"/>).</para>
      <figure float="none" id="fig-hudson-new-project-advanced">
        <title>Pour afficher les options avancées, vous devez cliquer sur le bouton
            Avancé...</title>
        <mediaobject id="I_mediaobject5_d1e5167">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0504.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0504.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>L'option<indexterm id="I_indexterm5_d1e5174" significance="normal"><primary>tâches de build free-style</primary><secondary>période d'attente</secondary></indexterm><indexterm id="I_indexterm5_d1e5179" significance="normal"><primary>période d'attente avant que le build ne soit lancé</primary></indexterm> période d'attente dans la configuration du job vous permet simplement
          d'outrepasser la période d'attente définie globalement dans la configuration
          du système de Jenkins (voir <xref linkend="sect-configuration-system"/>). Cette
          option est principalement utilisée pour les systèmes de gestion de version qui ne
          supportent pas les commits atomiques, comme par exemple
          <indexterm id="I_indexterm5_d1e5185" significance="normal"><primary>CVS</primary><secondary>retarder la construction d'un job</secondary></indexterm>CVS, mais également dans les équipes où les développeurs ont
          pour habitude de diviser le commit de leur travail en plusieurs petites contributions.</para>
      <para>L'option<indexterm id="I_indexterm5_d1e5193" significance="normal"><primary>tâches de build free-style</primary><secondary>bloquer pour un projet en amont</secondary></indexterm> “Empêcher le build quand un projet en amont est en cours de build” est utile lorsque plusieurs
          projets liés sont affectés par un seul commit mais qu'ils doivent être construits
          dans un ordre spécifique. Si vous activez cette option, Jenkins attendra que toutes
          les tâches de build en amont (voir <xref linkend="sect-build-triggers"/>) soient terminés
          avant de démarrer le build.</para>
      <para>Par exemple, lorsque vous livrez une nouvelle version d'un projet Apache
          Maven multimodule, la mise à jour du numéro de version se fera dans plusieurs,
          voir l'ensemble, des modules du projet. Supposons que nous ayons ajouté une application
          web au projet Game of Life que nous avons utilisé dans le <xref linkend="chapter-first-steps"/>,
          et que nous l'ayons ajouté sous la forme d'un projet Apache Maven séparé. Lorsque que
          nous livrons une nouvelle version de ce projet, aussi bien le numéro de version du core que celui de
          l'application web seront mis à jour (voir <xref linkend="fig-hudson-new-job-version-updates"/>).
          Avant de pouvoir construire l'application web, nous devons construire une nouvelle version
          du module core de Game of Life. Si vous avez cependant des tâches de build free-style séparés
          pour chaque module, les tâches de build de l'application web et du core démarreraient
          simultanément. Le build de l'application web échouera si le build du core n'a pas produit
          de nouvelle version du module du core, même s'il n'y a pas de test échoué.</para>
      <para>Pour éviter ce problème, vous pourriez configurer la tâche de build de l'application web
          pour ne démarrer <emphasis>seulement</emphasis> lorsque le build du core s'est terminé
          avec succès. Cela signifie cependant que l'application web ne serai jamais construite
          si des changements été effectué uniquement pour celle-ci et non pour le module core.
          Une meilleure approche est alors d'utiliser l'option “Construire à la suite d'autres
          projets (projets en amont)”. Dans ce cas, lorsqu'un numéro de version a été mis à jour
          dans le contrôle de version, Jenkins programmera les deux builds pour leur exécution.
          Il attendra cependant que le build du module core se soit terminé pour démarrer le build
          de l'application web.</para>
      <figure float="none" id="fig-hudson-new-job-version-updates">
        <title>L'option “Empêcher le build quand un projet en aval est en cours de build” est
            utile quand un simple commit affecte plusieurs projets dépendants les uns des autres.</title>
        <mediaobject id="I_mediaobject5_d1e5215">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0505.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0505.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Vous <indexterm id="I_indexterm5_d1e5222" significance="normal"><primary>tâches de build free-style</primary><secondary>espace de travail pour, surcharger</secondary></indexterm>pouvez également surcharger l'espace de travail par défaut utilisé par Jenkins pour
          y tirer le code source et construire votre projet. De manière générale, Jenkins
          créera un espace de travail spécifique pour votre projet accessible
          dans le répertoire de la tâche de build de votre projet (voir <xref linkend="sec-hudson-home-directory-contents"/>). Cela fonctionne dans
          presque tous les cas. Il y a cependant des cas dans lesquels vous
          pourriez avoir besoin de forcer Jenkins à utiliser un espace de travail
          différent grâce à cette option. Un example serait le cas où vous
          auriez besoin de construire plusieurs tâches de build dans un même espace de
          travail. Vous pouvez définir un répertoire de travail différent en <phrase role="keep-together">cochant</phrase> l'option “Utiliser un répertoire de travail spécifique”
          et en spécifiant le chemin vous même. Ce chemin peut aussi bien être absolu ou relatif au
          répertoire de base de Jenkins.</para>
      <para>Nous verrons d'autres options avancées qui apparaissent dans
          cette section plus loin dans ce <indexterm id="I_indexterm5_d1e5235" class="endofrange" startref="ch05-free" significance="normal"><primary/></indexterm> livre.</para>
    </sect2>
  </sect1>
  <sect1 id="sect-subversion">
      <title>Configurer la Gestion du Code Source</title>
      <para>Dans<indexterm class="startofrange" id="ch05-scm" significance="normal"><primary>SCM (Gestion du Code Source)</primary></indexterm> son rôle le plus basique, un serveur d'Intégration Continue
          surveille votre système de gestion de version et vérifie les derniers
          changements au fur et à mesure. Le serveur compile et test alors la
          version la plus récente du code. Il peut alternativement récupérer
          et construire simplement la dernière version de votre code source de
          manière régulière. Dans tous les cas, une forte intégration avec votre
          système de gestion de version est essentielle.</para>
      <para>De par leur rôle fondamental, les options de configuration du
          SCM sont identiques au travers de tous les types de tâches de build dans Jenkins. Jenkins <indexterm id="I_indexterm5_d1e5249" significance="normal"><primary>systèmes de gestion de version</primary><secondary>supporté par Jenkins</secondary></indexterm><indexterm id="I_indexterm5_d1e5254" significance="normal"><primary>Jenkins</primary><secondary>systèmes de gestion de version supportés par</secondary></indexterm>supporte CVS et Subversion nativement, embarque
          un support pour Git et s'intègre avec un grand nombre d'autres systèmes
          de gestion de version via des plugins. A l'écriture de ce livre, le
          support par plugin inclus Accurev, Bazaar, BitKeeper, ClearCase, CMVC,
          Darcs, Dimensions, Git, CA Harvest, Mercurial, Perforce, PVCS, Rational
          Team Concert, StarTeam, Surround SCM, CM/Synergy, Microsoft Team
          Foundation Server et même Visual SourceSafe. Dans le reste de cette
          section, nous verrons comment configurer quelques uns des SCM les
          plus courants.</para>
    <sect2>
      <title>Travailler avec Subversion</title>
      <para>Subversion<indexterm class="startofrange" id="ch05-sub1" significance="normal"><primary>tâches de build free-style</primary><secondary>Subversion utilisé avec</secondary></indexterm><indexterm class="startofrange" id="ch05-sub2" significance="normal"><primary>Subversion</primary><secondary sortas="free-style">avec les tâches de build free-style</secondary></indexterm> est l'un des systèmes de gestion de version parmi les plus utilisés,
      et Jenkins embarque un support complet de Subversion (voir <xref linkend="fig-hudson-new-job-svn"/>). Pour utiliser du code source provenant
      d'un dépôt Subversion, vous devez simplement fournir l'URL correspondante - cela
      fonctionnera parfaitement avec n'importe lequel des trois protocoles utilisés
      par Subversion (http, svn ou file). Jenkins vérifiera que l'URL est valide aussitôt
      que vous l'aurez remplie. Si le dépôt nécessite une authentification, Jenkins vous
      questionnera alors sur vos identifiants automatiquement et les enregistrera pour 
      tout autre tâche de build qui aura besoin d'accéder à ce même dépôt.</para>
      <figure float="0" id="fig-hudson-new-job-svn">
        <title>Jenkins embarque par défaut le support pour Subversion</title>
        <mediaobject id="I_mediaobject5_d1e5281">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0506.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0506.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Par défaut, Jenkins récupérera le contenu du dépôt dans un
      sous-répertoire de votre espace de travail, dont le nom sera celui
      du dernier élément de l'URL Subversion. Donc si votre URL Subversion
      est <ulink url="svn://localhost/gameoflife/trunk"/>, Jenkins récupérera
      le contenu du dépôt dans une répertoire nommé <filename moreinfo="none">trunk</filename> 
      dans l'espace de travail de votre tâche de build. So vous préférez nommer 
      votre répertoire différemment, remplissez le nom que vous souhaitez 
      dans le champ <command moreinfo="none">Local module directory</command>. 
      Mettez un point (“.”) dans le champ si vous souhaitez mettre le code 
      source directement à la racine de l'espace de travail.</para>
      <para>Occasionnellement, vous aurez besoin de récupérer du code 
      source de plusieurs URLs Subversion. Dans ce cas, utilisez le bouton 
      “Add more locations...” pour ajouter autant de <phrase role="keep-together">dépôts</phrase>
      sources que vous en avez besoin.</para>
      <para>Une bonne procédure de build ne devrait pas modifier le code
      source ou laisser de fichiers supplémentaires qui pourrait porter à
      confusion votre système de gestion de version ou la procédure de build. 
      Les artefacts générés et fichiers temporaires (comme les fichiers de journaux,
      rapports, données de test ou bases de données fichier) devraient être 
      créés dans un répertoire séparé et créé spécifiquement pour ce besoin (tout comme
      le répertoire <filename moreinfo="none">target</filename> dans les builds Apache 
      Maven), et/ou être configurés pour être ignorés par le dépôt de votre système 
      de gestion de version.
      Ces fichiers devrait également être supprimés par la procédure de build, 
      une fois que le build n'en a plus besoin. Cela prend également une grande 
      importance dans l'assurance de construire une procédure de build propre 
      et <phrase role="keep-together">reproductible—</phrase>pour une 
      version donnée de votre code source, le build devrait se comporter 
      exactement de la même manière, peu importe où et quand il est 
      exécuté. Les changements locaux, et la présence de fichiers temporaires, 
      peuvent potentiellement compromettre cela.</para>
      <para>Vous pouvez finement configurer la manière dont Jenkins récupère 
      la dernière version de votre code source en sélectionnant la valeur 
      attendue dans la liste déroulante Check-out Strategy. Si votre projet 
      est correctement configuré, vous pouvez cependant accélérer grandement 
      les choses en choisissant “Use ‘svn update’ as much as possible”. Il 
      s'agit de l'option la plus rapide mais elle laisse les artefacts et 
      fichiers des builds précédents dans votre espace de travail. Pour 
      vous positionner du côté de la sécurité, vous pouvez choisir la 
      seconde option (“Use ‘svn update’ as much as possible, with ‘svn revert’ 
      before update”), qui exécutera systématiquement <literal moreinfo="none">svn revert</literal> 
      avant de lancer <literal moreinfo="none">svn update</literal>. Cela vous 
      assurera qu'aucun fichier n'aura été modifié localement. Cependant, 
      cela ne supprimera pas les fichiers nouvellement créés pendant la 
      procédure de build. Sinon, vous pouvez demander à Jenkins de 
      supprimer tous les fichiers à ignorer ou non versionnés avant de 
      faire un <literal moreinfo="none">svn update</literal> ou encore 
      jouer la carte de la sécurité et récupérer une copie propre et 
      complète à chaque build.</para>
      <para>Une autre<indexterm id="I_indexterm5_d1e5322" significance="normal"><primary>navigateurs de code source</primary><secondary sortas="Subversion">avec Subversion</secondary></indexterm><indexterm id="I_indexterm5_d1e5327" significance="normal"><primary>tâches de build free-style</primary><secondary>Subversion utilisé avec</secondary><tertiary>navigateurs de code source pour</tertiary></indexterm><indexterm id="I_indexterm5_d1e5334" significance="normal"><primary>Subversion</primary><secondary>navigateurs de code source pour</secondary></indexterm> fonctionnalité de Jenkins particulièrement utile 
      est sont intégration avec les navigateurs de code source. Un bon 
      navigateur de code source est un élément important de votre 
      configuration d'Intégration Continue. Cela vous permet de voir 
      d'un coup d'œil les changements qui sont à l'origine du 
      lancement de votre build, ce qui est très utile quand vous 
      avez besoin de localiser un problème lors d'un build échoué 
      (voir <xref linkend="fig-hudson-new-job-diff"/>). Jenkins intègre la plupart des 
      principaux navigateurs de source code, y compris des outils 
      open source comme WebSVN ou Sventon, ainsi que ceux commerciaux 
      tels qu'Atlassian FishEye.</para>
      <figure float="0" id="fig-hudson-new-job-diff">
        <title>Navigateur de code source montrant les changements dans le 
        code qui ont causé le build.</title>
        <mediaobject id="I_mediaobject5_d1e5345">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0507.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0507.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Jenkins<indexterm id="I_indexterm5_d1e5352" significance="normal"><primary>tâches de build freestyle</primary><secondary>Subversion utilisé avec</secondary><tertiary>exclure des régions du déclenchement</tertiary></indexterm><indexterm id="I_indexterm5_d1e5359" significance="normal"><primary>Subversion</primary><secondary>exclure des régions du déclenchement de builds</secondary></indexterm> vous permet également d'affiner la sélection des 
      changements qui déclencherons un build. Dans la section avancée, 
      vous pouvez utiliser le champ Régions exclues pour dire à Jenkins 
      de ne pas déclencher de build si certains fichiers sont modifiés. 
      Ce champ prend en compte une liste d'expressions régulières qui 
      identifient les fichiers qui ne doivent <emphasis>pas</emphasis> 
      déclencher de build. Par exemple, supposez que vous ne voulez pas 
      que Jenkins démarre un build si seulement des images ont été 
      modifiées. Pour ce faire, vous pouvez utiliser un groupe d'expressions 
      régulières comme celles qui suivent :</para>
      <programlisting id="I_programlisting5_d1e5368" format="linespecific">/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.jpg
/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.gif
/trunk/gameoflife/gameoflife-web/src/main/webapp/.*\.png</programlisting>
      <para>De manière alternative, vous pouvez spécifier uniquement 
      les Régions Incluses, si vous n'êtes intéressé que par les 
      changements d'une partie de votre arbre de code source. Vous 
      pouvez même combiner les champs Régions exclues et Régions 
      Incluses — dans ce cas, un fichier modifié ne déclenchera 
      un build que s'il est inclus dans les Régions Incluses mais 
      pas dans les Régions Exclues.</para>
      <para>Vous <indexterm id="I_indexterm5_d1e5375" significance="normal"><primary>tâches de build free-style</primary><secondary>Subversion utilisé avec</secondary><tertiary>exclure des utilisateurs du déclenchement</tertiary></indexterm><indexterm id="I_indexterm5_d1e5382" significance="normal"><primary>utilisateurs</primary><secondary>exclure pour le déclenchement de build</secondary></indexterm><indexterm id="I_indexterm5_d1e5387" significance="normal"><primary>Subversion</primary><secondary>exclure des utilisateurs du déclenchement de builds</secondary></indexterm>pouvez également ignorer les changements provenant 
      de certains utilisateurs (Utilisateurs Exclus), ou pour certains <indexterm id="I_indexterm5_d1e5393" significance="normal"><primary>messages de commit, exclure du déclenchement de tâches 
      de build</primary></indexterm><indexterm id="I_indexterm5_d1e5396" significance="normal"><primary>tâches de build free-style</primary><secondary>Subversion utilisé avec</secondary><tertiary>exclure des messages de commit du déclenchement</tertiary></indexterm><indexterm id="I_indexterm5_d1e5403" significance="normal"><primary>Subversion</primary><secondary>exclure des messages de commit du déclenchement de 
      builds</secondary></indexterm>messages de commit en particulier (Excluded Commit Messages).
      Par exemple, si votre projet utilise Maven, vous pourrez être amené à 
      utiliser le plugin Maven Release Plugin pour promouvoir votre application 
      d'une version snapshot<indexterm id="I_indexterm5_d1e5409" significance="normal"><primary>versions SNAPSHOT</primary></indexterm><indexterm id="I_indexterm5_d1e5412" significance="normal"><primary>Apache Maven</primary><secondary>versions SNAPSHOT</secondary></indexterm> vers une version release officielle. Ce plugin 
      poussera automatiquement le numéro de version de votre application 
      depuis sa version snapshot utilisée pendant le développement (comme par 
      exemple 1.0.1-SNAPSHOT) vers une version release (1.0.1), empaquettera, 
      déploiera votre application avec ce numéro de version et le mettra 
      à jour avec le prochain numéro de version snapshot (par exemple 1.0.2-SNAPSHOT) 
      pour les développements futurs. Pendant cette <phrase role="keep-together">procédure</phrase>, Apache Maven 
      s'occupe de multiples étapes comptables comme d'effectuer le commit 
      du nouveau numéro de version, de créer la nouvelle étiquette pour la 
      livraison de votre application et enfin faire l'opération de commit 
      pour le nouveau <phrase role="keep-together">numéro</phrase> de version 
      snapshot.</para>
      <para>Supposez maintenant que vous avez une tâche de build spécifique 
      pour effectuer une nouvelle livraison utilisant cette <phrase role="keep-together">procédure</phrase>. 
      Les différentes opérations de commits générées par le plugin Maven Release 
      Plugin devraient normalement déclencher des tâches de build dans Jenkins. 
      Cependant, comme votre tache de build de livraison est déjà en train de 
      compiler et tester cette version de votre application, vous n'avez pas 
      besoin que Jenkins le fasse à nouveau dans une autre tâche de build. Pour 
      s'assurer que Jenkins ne déclenche pas un autre build dans ce cas, vous 
      pouvez utiliser le champ Excluded Commit Messages avec la valeur suivante :</para>
      <programlisting id="I_programlisting5_d1e5430" format="linespecific">[maven-release-plugin] prepare release.*</programlisting>
      <para>Cela vous assurera que Jenkins sautera les changements correspondant
      à des nouvelles versions de release mais pas ceux correspondant à la 
      prochaine <indexterm id="I_indexterm5_d1e5434" class="endofrange" startref="ch05-sub1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e5436" class="endofrange" startref="ch05-sub2" significance="normal"><primary/></indexterm>version snapshot.</para>
    </sect2>
    <sect2 id="git-plugin">
      <title>Travailler avec Git</title>
      <para>
        <emphasis>Contribué par Matthew McCullough</emphasis>
      </para>
      <para><ulink url="http://git-scm.com/">Git</ulink> est <indexterm class="startofrange" id="ch05-git1" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary></indexterm><indexterm class="startofrange" id="ch05-git2" significance="normal"><primary>Git</primary><secondary sortas="free-style">avec des tâches de build free-style</secondary></indexterm>un système de gestion de version distribué qui est le
          successeur logique de <ulink url="http://subversion.tigris.org/">Subversion</ulink> et un concurrent
          à <ulink url="http://mercurial.selenic.com/">Mercurial</ulink> partageant le même esprit. Le support de Git dans
          Jenkins est mature et complet. Il y a également plusieurs plugins
          qui peuvent contribuer au workflow général de Git dans Jenkins. Nous
          commencerons par nous intéresser au plugin Git qui apporte le support
          des fonctions principales de Git. Nous aborderons le sujet des plugins
          supplémentaires brièvement.</para>
      <sect3 id="installing-the-plugin">
        <title>Installation du plugin</title>
        <para>Le plugin Git <indexterm class="startofrange" id="ch05-gitinstall1" significance="normal"><primary>plugin Git</primary></indexterm><indexterm class="startofrange" id="ch05-gitinstall2" significance="normal"><primary>plugins</primary><secondary>Git</secondary></indexterm>est disponible dans le Gestionnaire de Plugins Jenkins et
            est documenté sur sa propre <ulink url="http://wiki.hudson-ci.org/display/HUDSON/Git+Plugin">page de
            wiki</ulink>. Le plugin suppose que Git (version 1.3.3 ou ultérieure) a
            été installé sur le serveur de build. Vous devrez donc vous en assurer
            préalablement. Vous pouvez vous en assurer en exécutant la commande suivante
            sur votre serveur de build :</para>
        <screen format="linespecific">$ <userinput moreinfo="none">git --version</userinput>
git version 1.7.1</screen>
        <para>Revenez ensuite à Jenkins et cochez la case correspondante dans le
            gestionnaire de plugins Jenkins et cliquez sur le bouton d'installation.</para>
        <sect4 id="system-wide-configuration-of-the-plugin">
          <title>Configuration système du plugin</title>
          <para>Après l'installation du plugin Git, une nouvelle
              section de configuration est disponible dans la page Administrer Jenkins<phrase role="unicode">→</phrase>Configurer le système (voir <xref linkend="I_figure1_id2245320"/>). Vous devez en particulier
              fournir le chemin vers l'exécutable de Git. Si Git est déjà installé
              sur votre système, entrez simplement “git” dans le champ.</para>
          <figure float="0" id="I_figure1_id2245320">
            <title>Configuration système du plugin Git</title>
            <mediaobject id="I_mediaobject5_d1e5503">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0508.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0508.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="ssh-key-setup">
          <title>Configuration de la clé SSH</title>
          <para>Si le <indexterm id="I_indexterm5_d1e5513" significance="normal"><primary>clés SSH</primary></indexterm><indexterm id="I_indexterm5_d1e5516" significance="normal"><primary>Git</primary><secondary>clés SSH</secondary></indexterm><indexterm id="I_indexterm5_d1e5521" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>clés SSH</tertiary></indexterm>dépôt Git auquel vous accédez utilise SSH
              sans mot de passe comme moyen d'<phrase role="keep-together">authentification—</phrase>par exemple si
              l'adresse d'accès ressemble à <literal moreinfo="none">git@github.com:matthewmccullough/some-repo.git</literal>—vous devrez
              fournir la partie privée de la clé sous forme de fichier <literal moreinfo="none">~/.ssh/id_rsa</literal> où <literal moreinfo="none">~</literal> est le répertoire racine du compte
              utilisateur <phrase role="keep-together">exécutant</phrase> Jenkins.</para>
          <para>L'empreinte du serveur distant devra additionnellement être
              ajoutée dans <literal moreinfo="none">~/.ssh/known_hosts</literal>
              pour éviter que Jenkins ne vous invite à accepter l'autorisation
              vers le serveur Git lors du premier accès alors que la console sera
              non interactive.</para>
          <para>Alternativement, si vous avez la possibilité de vous connecter avec l'utilisateur <literal moreinfo="none">jenkins</literal>, accédez par SSH à la machine Jenkins
              en tant que <literal moreinfo="none">jenkins</literal> et faites une tentative manuelle
              de cloner un dépôt Git distant. Cela testera la configuration de
              votre clé privée et remplira le fichier <literal moreinfo="none">known_hosts</literal> dans le répertoire <literal moreinfo="none">~/.ssh</literal>. C'est probablement la
              solution la plus simple de vous familiariser avec les subtilités
              de la <phrase role="keep-together">configuration</phrase> SSH.<indexterm id="I_indexterm5_d1e5568" class="endofrange" startref="ch05-gitinstall1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e5570" class="endofrange" startref="ch05-gitinstall2" significance="normal"><primary/></indexterm></para>
        </sect4>
      </sect3>
      <sect3 id="using-the-plugin">
        <title>Utilisation du plugin</title>
        <para>Que <indexterm id="I_indexterm5_d1e5577" significance="normal"><primary>Git</primary><secondary>adresse du dépôt</secondary></indexterm><indexterm id="I_indexterm5_d1e5582" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>adresse du dépôt</tertiary></indexterm>cela soit dans un nouveau projet Jenkins ou dans un projet existant, une nouvelle
            option de Gestion du Code Source pour Git sera affichée. Dès lors,
            vous pouvez configurer une ou plusieurs adresses de dépôts (voir <xref linkend="I_figure1_id2245479"/>). Un seul dépôt est utilisé dans la
            majorité des projets. Ajouter un second dépôt peut être utile dans
            des cas plus compliqués et vous permet de spécifier des cibles
            distinctes pour les opérations de <literal moreinfo="none">pull</literal> et de <literal moreinfo="none">push</literal>.</para>
        <sect4 id="advanced-per-project-source-code-management-configuration">
          <title>Configuration avancée par projet de la gestion du code source</title>
          <para>Dans la plupart des cas, l'URL du dépôt Git que vous utilisez
              devrait être suffisante. Cependant, si vous avez besoin de plus
              d'options, cliquez sur le bouton Avancé (voir <xref linkend="I_figure1_id2245574"/>).
              Cela apporte un un contrôle plus précis sur le comportement du
              <literal moreinfo="none">pull</literal>.</para>
          <para>Le <emphasis>Nom du dépôt</emphasis> est un titre raccourci
              (ou <literal moreinfo="none">remote</literal> en langage Git)
              pour un dépôt donné auquel vous pouvez vous reporter plus
              tard dans la configuration de l'action de merge.</para>
          <para>La <emphasis>Refspec</emphasis> est un <ulink url="http://progit.org/book/ch9-5.html">terme</ulink> spécifique
              du langage Git pour contrôler précisément ce qui est récupéré
              depuis les serveurs distants et sous quel espace de nom c'est
              stocké localement.</para>
        </sect4>
        <sect4 id="branches-to-build">
          <title>Branches à construire</title>
          <para>Le champ <indexterm id="I_indexterm5_d1e5629" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>branches à construire</tertiary></indexterm><indexterm id="I_indexterm5_d1e5636" significance="normal"><primary>Git</primary><secondary>branches à construire</secondary></indexterm>Branch Specifier (<xref linkend="I_figure1_id2245638"/>) peut être utilisé à l'aide d'un caractère générique  
          ou en spécifiant le nom d'une branche à construire par Jenkins. Si le 
          champ est laissé vide, toutes les branches seront construites. Pour 
          le moment, lorsque vous sauvegardez votre tâche pour la première fois 
          et qu'elle est configurée avec <emphasis>ce champ</emphasis> vide, il est alors rempli 
          avec <literal moreinfo="none">**</literal>, ce qui signifie "construire toutes les branches".</para>
          <figure float="none" id="I_figure1_id2245479">
            <title>Remplir une URL de dépôt Git</title>
            <mediaobject id="I_mediaobject5_d1e5653">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0509.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0509.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure float="none" id="I_figure1_id2245574">
            <title>Configuration avancée d'une URL de dépôt Git</title>
            <mediaobject id="I_mediaobject5_d1e5661">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0510.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0510.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
          <figure float="0" id="I_figure1_id2245638">
            <title>Configuration avancée des branches Git à construire</title>
            <mediaobject id="I_mediaobject5_d1e5669">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0511.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0511.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="excluded-regions">
          <title>Régions exclues</title>
          <para>Les régions (vues dans<xref linkend="I_figure1_id2245692"/>)
          <indexterm id="I_indexterm5_d1e5681" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>exclure certaines régions du déclenchement</tertiary></indexterm><indexterm id="I_indexterm5_d1e5688" significance="normal"><primary>Git</primary><secondary>exclure certaines régions du déclenchement de builds</secondary></indexterm>sont des chemins nommés spécifiquement ou génériques de votre 
          code source qui, même une fois modifiés, ne doivent pas déclencher 
          de build. Il s'agit généralement de fichiers non compilés tels que 
          les archives de locales ou d'images qui n'ont à priori pas d'effet 
          sur les tests unitaires ou d'intégration.</para>
          <figure float="0" id="I_figure1_id2245692">
            <title>Branches et régions</title>
            <mediaobject id="I_mediaobject5_d1e5697">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0512.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0512.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="excluded-users">
          <title>Utilisateurs Exclus</title>
          <para>Le plugin <indexterm id="I_indexterm5_d1e5707" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>exclure des utilisateurs du déclenchement</tertiary></indexterm><indexterm id="I_indexterm5_d1e5714" significance="normal"><primary>utilisateurs</primary><secondary>exclure du déclenchement de builds</secondary></indexterm><indexterm id="I_indexterm5_d1e5719" significance="normal"><primary>Git</primary><secondary>exclure des utilisateurs du déclenchement de builds</secondary></indexterm>Git vous permet également d'ignorer certains utilisateurs 
          même s'ils effectuent des changements du code source qui auraient 
          dû normalement déclencher un build.</para>
          <para>Cette action n'est pas aussi méchante qu'elle peut paraitre : 
          les utilisateyrs exclus sont généralement des utilisateurs 
          automatisés ou des développeurs non humains, qui ont des 
          comptes distincts avec des droits de commit sur le gestionnaire 
          de code source. Ces utilisateurs automatisés font généralement 
          de petites opérations comme incrémenter la version d'un fichier 
          <filename moreinfo="none">pom.xml</filename> plutôt que de véritables changements dans la logique de votre 
          application. Si vous souhaitez exclure plusieurs utilisateurs, 
          ajoutez les simplement sur des lignes séparées.</para>
        </sect4>
        <sect4 id="checkoutmerge-to-local-branch">
          <title>Récupérer/fusionner sur une branche locale</title>
          <para>Parfois <indexterm id="I_indexterm5_d1e5735" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>récupérer sur une branche locale</tertiary></indexterm><indexterm id="I_indexterm5_d1e5742" significance="normal"><primary>Git</primary><secondary>récupérer sur une branche locale</secondary></indexterm>vous aurez le besoin de récupérer directement 
          le <emphasis>HEAD de manière séparée</emphasis> dans une branche au travers du 
          hash d'un commit. Dans ce cas, spécifiez votre branche locale 
          dans le champ “Checkout/merge to a local branch”.</para>
          <para>Il est plus simple de l'illustrer par un exemple. Sans 
          spécifier de branche locale, le plugin ferait quelque chose
          comme cela : </para>
          <screen format="linespecific">git checkout 73434e4a0af0f51c242f5ae8efc51a88383afc8a</screen>
          <para>Autrement, si vous utilisiez une branche nommée <literal moreinfo="none">maBranche</literal>, Jenkins ferait la chose 
          suivante : </para>
          <screen format="linespecific">git branch -D maBranche
git checkout -b maBranche 73434e4a0af0f51c242f5ae8efc51a88383afc8a</screen>
        </sect4>
        <sect4 id="local-subdirectory-for-repo">
          <title>Dépôt dans un sous-répertoire local</title>
          <para>Par <indexterm id="I_indexterm5_d1e5767" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>localisation de l'espace de travail, ecraser</tertiary></indexterm><indexterm id="I_indexterm5_d1e5774" significance="normal"><primary>Git</primary><secondary>localisation de l'espace de travail, ecraser</secondary></indexterm>défaut, Jenkins clonera le dépôt Git 
          directement dans l'espace de travail de votre tâche de build. 
          Si vous préférez utiliser un répertoire différent, vous pouvez 
          le spécifier ici. Notez que ce répertoire est relatif à l'espace 
          de travail de votre tâche de build.</para>
        </sect4>
        <sect4 id="merge-before-build">
          <title>Fusionner avant le build</title>
          <para>Le <indexterm id="I_indexterm5_d1e5785" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>fusionner avant le build</tertiary></indexterm><indexterm id="I_indexterm5_d1e5792" significance="normal"><primary>Git</primary><secondary>fusionner avant le build</secondary></indexterm>cas typique d'utilisation de cette option est le remplissage 
          d'une branche d'intégration proche de la branche <literal moreinfo="none">master</literal>. N'oubliez pas que 
          seulement les fusions ne présentant pas de conflit seront 
          effectuées automatiquement. Les fusions plus complexes qui 
          requièrent une intervention manuelle feront échouer le build.</para>
          <para>La branche fusionnée qui en résulte ne sera pas poussée 
          automatiquement à moins que l'action de <literal moreinfo="none">push</literal> 
          ne soit activée dans les actions post-build.</para>
        </sect4>
        <sect4 id="prune-remote-branches-before-build">
          <title>Tailler les branches distantes avant le build</title>
          <para>Tailler <indexterm id="I_indexterm5_d1e5811" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>tailler les branches distantes avant le build</tertiary></indexterm><indexterm id="I_indexterm5_d1e5818" significance="normal"><primary>Git</primary><secondary>tailler les branches distantes avant le build</secondary></indexterm> supprime les copies locales de branches distantes qui proviennent 
          d'un clone précédent mais qui ne sont plus présentent sur le dépôt 
          distant. En résumé, il s'agit du nettoyage du clone local pour qu'il 
          soit parfaitement synchronisé avec son jumeau distant.</para>
        </sect4>
        <sect4 id="clean-after-checkout">
          <title>Nettoyer après récupération</title>
          <para>Active <indexterm id="I_indexterm5_d1e5829" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>nettoyer après récupération</tertiary></indexterm><indexterm id="I_indexterm5_d1e5836" significance="normal"><primary>Git</primary><secondary>nettoyer après récupération</secondary></indexterm> la purge de tout fichier ou répertoire non 
          versionné, ramenant le votre copie de travail à son étât vierge.</para>
        </sect4>
        <sect4 id="recursively-update-submodules">
          <title>Mise à jour récursive des sous-modules</title>
          <para>Si <indexterm id="I_indexterm5_d1e5848" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>mise à jour récursive des sous-modules</tertiary></indexterm><indexterm id="I_indexterm5_d1e5855" significance="normal"><primary>Git</primary><secondary>mise à jour récursive des sous-modules</secondary></indexterm> vous utilisez les fonctionnalités de sous-modules de Git dans 
          votre projet, cette option vous assure que chaque sous-module 
          est à jour grâce à un appel explicite à la commande <literal moreinfo="none">update</literal>, même si les sous-modules 
          sont imbriqués dans d'autres sous-modules.</para>
        </sect4>
        <sect4 id="use-commit-author-in-changelog">
          <title>Utiliser l'auteur du commit dans changelog</title>
          <para>Jenkins<indexterm id="I_indexterm5_d1e5869" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>auteur du commit, inclure dans le changelog</tertiary></indexterm><indexterm id="I_indexterm5_d1e5876" significance="normal"><primary>Git</primary><secondary>auteur du commit, inclure dans le changelog</secondary></indexterm> note et affiche l'auteur du changement de code dans une 
          vue synthétique. Git note l'auteur et le commiter du code
          distinctement, et cette option vous permet de choisir lequel 
          apparaîtra dans le changelog.</para>
        </sect4>
        <sect4 id="wipe-out-workspace">
          <title>Effacer l'espace de travail</title>
          <para>Typiquement<indexterm id="I_indexterm5_d1e5887" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>espace de travail, effacer avant le build</tertiary></indexterm><indexterm id="I_indexterm5_d1e5894" significance="normal"><primary>Git</primary><secondary>espace de travail, effacer avant le build</secondary></indexterm> Jenkins réutilisera l'espace de travail, le rafraîchissant simplement 
          si nécessaire et si vous avez activé l'option “Clean after
          checkout”, nettoiera les fichiers non versionnés. Cependant, si vous 
          préférez avec un espace de travail complétement propre, vous pouvez
          utiliser l'option “Wipe out workspace” pour supprimer et 
          reconstruire l'espace de travail de zéro. Gardez à l'esprit 
          que cela allongera significativement le temps d'initialisation 
          et de construiction du projet.</para>
        </sect4>
        <sect4 id="choosing-strategy">
          <title>Choix de la stratégie</title>
          <para>Jenkins <indexterm id="I_indexterm5_d1e5905" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>branches à construire</tertiary></indexterm><indexterm id="I_indexterm5_d1e5912" significance="normal"><primary>Git</primary><secondary>branches à construire</secondary></indexterm>decide quelle branches il doit construire en se basant sur 
          une certaine <emphasis>stratégie</emphasis> (voir <xref linkend="I_figure1_id2245980"/>). Les utilisateurs peuvent influencer 
          cette procédure de recherche de branche. Le choix par défaut est de rechercher tous les 
          HEADs de branche. Si le plugin Gerrit est installé, d'autres options 
          pour construire tous les commits notifiés par Gerrit seront affichées.</para>
          <figure float="none" id="I_figure1_id2245980">
            <title>Choix de la stratégie</title>
            <mediaobject id="I_mediaobject5_d1e5926">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0513.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0513.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="git-executable">
          <title>Exécutable Git</title>
          <para>Dans les <indexterm id="I_indexterm5_d1e5936" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>exécutable Git, spécifier</tertiary></indexterm>options globales de Jenkins (voir <xref linkend="I_figure1_id2246035"/>), plusieurs exécutables Git 
          peuvent être configurés et utilisés build par build. Cela est peu 
          régulièrement utilisé et seulement lorsqu'un clone ou d'autres opérations 
          Git sont spécifiques à une version particulière de Git. Git tend à  
          être très flexible quant à ses numéro de version ; les dépôts légèrement 
          anciens peuvent être clonés très facilement avec une nouvelle version 
          de Git et inversement.</para>
          <figure float="0" id="I_figure1_id2246035">
            <title>Configuration globale de l'exécutable de Git</title>
            <mediaobject id="I_mediaobject5_d1e5949">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0514.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0514.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="repository-browser">
          <title>Navigateur de dépôt</title>
          <para>Tout comme <indexterm id="I_indexterm5_d1e5959" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>navigateurs de code source pour</tertiary></indexterm><indexterm id="I_indexterm5_d1e5966" significance="normal"><primary>Git</primary><secondary>navigateurs de code source pour</secondary></indexterm><indexterm id="I_indexterm5_d1e5971" significance="normal"><primary>navigateurs de code source</primary><secondary sortas="Git">avec Git</secondary></indexterm>Subversion, Git a plusieurs navigateurs de source qu'il 
          peut utiliser. Les plus couramment utilisés sont Gitorious, Git Web, ou
          <indexterm id="I_indexterm5_d1e5977" significance="normal"><primary>Dépôt GitHub</primary></indexterm>GitHub. Si vous fournissez l'URL 
          correspondante à votre navigateur de dépôt, Jenkins pourra alors 
          afficher un lien direct vers les changements de votre code source 
          qui ont déclenché le build (voir <xref linkend="I_figure1_id2246089"/>).</para>
          <figure float="0" id="I_figure1_id2246089">
            <title>Navigateur de dépôt</title>
            <mediaobject id="I_mediaobject5_d1e5986">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0515.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0515.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
      </sect3>
      <sect3 id="build-triggers">
        <title>Déclencheurs de build</title>
        <para>Le <indexterm class="startofrange" id="ch05-gittrigger1" significance="normal"><primary>tâches de build free-style</primary><secondary>Git utilisé avec</secondary><tertiary>déclencheurs de build</tertiary></indexterm><indexterm class="startofrange" id="ch05-gittrigger2" significance="normal"><primary>Git</primary><secondary>déclencheurs de build</secondary></indexterm>plugin Git de base offre la possibilité de 
        <emphasis>scruter l'outil de gestion de version</emphasis> régulièrement 
        et de vérifier si de nouveau changements ont eu lieu depuis la dernière 
        requête. Si des changements sont présents, un build est alors lancé. Le 
        journal de scrutation (montré dans <xref linkend="I_figure1_id2246150"/>) est accessible 
        par un lien dans la partie gauche de la page dans la barre de navigation 
        lorsque vous visitez une tâche spécifique. Vous y trouverez les 
        informations sur la dernière fois que le dépôt a été scruté et s'il a 
        renvoyé une liste de changements (voir
        <xref linkend="I_figure1_id2246192"/>).</para>
        <figure float="0" id="I_figure1_id2246150">
          <title>Journal de scrutation</title>
          <mediaobject id="I_mediaobject5_d1e6019">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0516.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0516.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>La scrutation de Git est dilluée dans un format plus orienté 
          développeur qui montre les commentaires de commit ainsi que des 
          hyperliens qui vers une vue plus détaillée des utilisateurs et des 
          fichiers modifiés.</para>
        <figure float="0" id="I_figure1_id2246192">
          <title>Résultats de la scrutation de Git</title>
          <mediaobject id="I_mediaobject5_d1e6029">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0517.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0517.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Installer le <emphasis>Gerrit Build Trigger</emphasis> ajoute une option 
        <emphasis>Gerrit event</emphasis> qui peut être plus efficace et 
        précise que de simplement scruter le dépôt.</para>
        <sect4 id="gerrit-trigger">
          <title>Déclenchement par Gerrit</title>
          <para><ulink url="http://code.google.com/p/gerrit/">Gerrit</ulink>
          est<indexterm id="I_indexterm5_d1e6049" significance="normal"><primary>Gerrit Trigger plugin</primary></indexterm><indexterm id="I_indexterm5_d1e6052" significance="normal"><primary>plugins</primary><secondary>Gerrit Trigger</secondary></indexterm> une application web open source qui 
          facilite les <ulink url="https://review.source.android.com/#q,status:open,n,z">revues de 
          code</ulink> pour les projets dont les sources sont gérées par Git. Il 
          lit le dépôt Git traditionnel et apporte une comparaison côte-à-côte 
          des changements. Lorsque le code est revu, Gerrit apporte alors un 
          lieu pour commenter et déplacer le patch dans un état <emphasis>ouvert</emphasis>, 
          <emphasis>fusionné</emphasis> ou <emphasis>abandonné</emphasis>.</para>
          <para>Le <ulink url="http://wiki.hudson-ci.org/display/HUDSON/Gerrit+Trigger">Gerrit
          Trigger</ulink> est un plugin Jenkins qui peut déclencher un build Jenkins 
          sur du code quand n'importe quelle activité liée à un utilisateur spécifique 
          survient dans le projet d'un utilisateur défini du dépôt Git (voir <xref linkend="I_figure1_id2246304"/>). Il s'agit d'une alternative aux options 
          plus régulièrement utilisées comme la <emphasis>construction périodique</emphasis> ou la 
          <emphasis>scrutation de l'outil de gestion de version</emphasis>.</para>
          <figure float="0" id="I_figure1_id2246304">
            <title>Déclenchement par Gerrit</title>
            <mediaobject id="I_mediaobject5_d1e6087">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0518.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0518.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>La configuration de ce plugin est minimale et focalisée sur 
          le <emphasis>Type du Projet</emphasis> et son <emphasis>Pattern</emphasis> 
          ainsi que le <emphasis>Type de Branches</emphasis>
          et leur <emphasis>Pattern</emphasis>. Dans chaque paire, le
          <emphasis>type</emphasis> peut être <emphasis>Plain</emphasis>,
          <emphasis>Path</emphasis>ou bien <phrase role="keep-together"><emphasis>RegExp</emphasis> — </phrase>descriptif 
          de ce qu'il faut observer — et la valeur
          (<emphasis>pattern</emphasis>) à évaluer en utilisant le type
          <emphasis>type</emphasis> comme<indexterm id="I_indexterm5_d1e6127" class="endofrange" startref="ch05-gittrigger1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6130" class="endofrange" startref="ch05-gittrigger2" significance="normal"><primary/></indexterm> guide.</para>
        </sect4>
      </sect3>
      <sect3 id="post-build-actions">
        <title>Actions post-build</title>
        <para>Le<indexterm class="startofrange" id="ch05-postbuild1" significance="normal"><primary>freestyle build jobs</primary><secondary>Git used with</secondary><tertiary>post-build merging and pushing actions</tertiary></indexterm><indexterm class="startofrange" id="ch05-postbuild2" significance="normal"><primary>Git</primary><secondary>post-build merging and pushing actions</secondary></indexterm> plugin Git pour Jenkins ajoute des capacités spécifiques à Git 
        au post-traitement des artefacts du build. Plus spécifiquement, le Git
        Publisher (montré dans <xref linkend="I_figure1_id2246534"/>) permet les
        actions de merge et de push. Cochez la case du Git Publisher pour afficher
        ses quatres options.</para>
        <figure float="none" id="I_figure1_id2246534">
          <title>Git Publisher</title>
          <mediaobject id="I_mediaobject5_d1e6156">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0520.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0520.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <sect4 id="push-only-if-build-succeeds">
          <title>Pousser seulement si le build est réussi</title>
          <para>Si une fusion ou tout autre action entraînant la 
          création d'un commit a été faite pendant le build Jenkins, 
          cette option peut alors être activée pour pousser les
          changements dans le dépôt distant.</para>
        </sect4>
        <sect4 id="merge-results">
          <title>Fusionner les résultats</title>
          <para>Si une fusion au début du build a été configurée, la 
          branche résultante est alors pousser vers son origine (voir <xref linkend="I_figure1_id2246482"/>).</para>
          <figure float="none" id="I_figure1_id2246482">
            <title>Fusionner les résultats</title>
            <mediaobject id="I_mediaobject5_d1e6176">
              <imageobject role="print">
                <imagedata fileref="figs/print/jtdg_0519.pdf" format="PDF"/>
              </imageobject>
              <imageobject role="web">
                <imagedata fileref="figs/web/jtdg_0519.png" format="PNG"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect4>
        <sect4 id="tags">
          <title>Étiquettes</title>
          <para>Lorsque vous poussez des étiquettes, chacune d'elle peut être 
          nommée et choisie d'être créée si elle n'existe pas (ce qui échoue si 
          elle existe déjà). Les variables d'environnement peuvent être 
          utilisées dans le nom des étiquettes. Par exemple vous pouvez 
          utiliser l'ID du process avec <literal moreinfo="none">HUDSON_BUILD_$PPID</literal> ou même le numéro de build 
          s'il est fourni par un plugin Jenkins avec <literal moreinfo="none">$HUDSON_AUTOTAG_$BUILDNUM</literal>. Les étiquettes 
          peuvent être ciblées sur un dépôt distant spécifique comme <literal moreinfo="none">origin</literal> ou <literal moreinfo="none">integrationrepo</literal>.</para>
        </sect4>
        <sect4 id="branches">
          <title>Branches</title>
          <para>Le HEAD courant utilisé dans le build Jenkins d'une application 
          peut être poussé dans d'autres dépôts distants lors d'une étape suivant 
          le build. Vous n'avez à spécifier que la branche de destination et le 
          nom du dépôt distant.</para>
          <para>Les noms des dépôts distants sont validés en comparaison à la 
          configuration précédemment faite du plugin. Si le dépôt n'existe pas, 
          un avertissement est <indexterm id="I_indexterm5_d1e6205" class="endofrange" startref="ch05-postbuild1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6207" class="endofrange" startref="ch05-postbuild2" significance="normal"><primary/></indexterm>affiché.</para>
        </sect4>
      </sect3>
      <sect3 id="github-plugin">
        <title>Plugin GitHub</title>
        <para>Le <indexterm id="I_indexterm5_d1e6215" significance="normal"><primary>Plugin GitHub</primary></indexterm><indexterm id="I_indexterm5_d1e6218" significance="normal"><primary>plugins</primary><secondary>GitHub</secondary></indexterm>plugin GitHub offre deux points d'intégration. Premièrement, il
        apporte un lien optionnel vers la page de démarrage du projet sur GitHub. 
        Entrez simplement l'URL du projet (sans la partie tree/master ou tree/branch).
        Par exemple, <literal moreinfo="none">http://github.com/matthewmccullough/git-workshop</literal>.</para>
        <para>Ensuite, <indexterm id="I_indexterm5_d1e6229" significance="normal"><primary>Dépôt GitHub</primary></indexterm>le plugin GitHub plugin permet d'obtenir 
        un lien par fichier modifié qui sera relié directement au <emphasis>navigateur de dépôt</emphasis> 
        via la section de <emphasis>gestion du code source</emphasis> (voir
        <xref linkend="I_figure1_id2246641"/>).</para>
        <figure float="0" id="I_figure1_id2246641">
          <title>Navigateur de dépôt GitHub</title>
          <mediaobject id="I_mediaobject5_d1e6244">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0521.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0521.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Avec le choix de <literal moreinfo="none">githubweb</literal> comme
        navigateur de dépôt, tout fichier sur lequel des changements auront été 
        détectés sera lié à la page web de visualisation du source appropriée sur <indexterm id="I_indexterm5_d1e6254" class="endofrange" startref="ch05-git1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6256" class="endofrange" startref="ch05-git2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6258" class="endofrange" startref="ch05-scm" significance="normal"><primary/></indexterm>GitHub (<xref linkend="I_figure1_id2246688"/>).</para>
        <figure float="none" id="I_figure1_id2246688">
          <title>Navigateur de dépôt GitHub</title>
          <mediaobject id="I_mediaobject5_d1e6266">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0522.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0522.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
      </sect3>
    </sect2>
  </sect1>
  <sect1 id="sect-build-triggers">
    <title>Build Triggers</title>
    <para>Once<indexterm class="startofrange" id="ch05-trigger1" significance="normal"><primary>freestyle build jobs</primary><secondary>build triggers for</secondary></indexterm><indexterm class="startofrange" id="ch05-trigger2" significance="normal"><primary>build triggers</primary><secondary sortas="free-style">for freestyle build jobs</secondary></indexterm> you have configured your version control system, you need
    to tell Jenkins when to kick off a build. You set this up in the Build
    Triggers section.</para>
    <para>In a Freestyle build, there are three basic ways a build job can be
    triggered (see <xref linkend="fig-hudson-new-job-triggers"/>):</para>
    <itemizedlist>
      <listitem>
        <para>Start a build job once another build job has completed</para>
      </listitem>
      <listitem>
        <para>Kick off builds at periodical intervals</para>
      </listitem>
      <listitem>
        <para>Poll the SCM for changes</para>
      </listitem>
    </itemizedlist>
    <figure float="none" id="fig-hudson-new-job-triggers">
      <title>There are many ways that you can configure Jenkins to start a
      build job</title>
      <mediaobject id="I_mediaobject5_d1e6304">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0523.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0523.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <sect2>
      <title>Triggering a Build Job Once Another Build Job Has
      Finished</title>
      <para>The <indexterm id="I_indexterm5_d1e6314" significance="normal"><primary>build triggers</primary><secondary>when another build has finished</secondary></indexterm>first option lets you set up a build that will be run
      whenever another build has finished. This is an easy way to set up a
      build pipeline. For example, you might set up an initial build job to
      run unit and integration tests, followed by another separate build job
      to run more CPU-intensive code quality metrics. You simply enter the
      name of the preceding build job in this field. If the build job can be
      triggered by several other build jobs, just list their names here,
      separated by commas. In this case, the build job will be triggered once
      <emphasis>any</emphasis> of the build jobs in the list finish.</para>
      <para>There is a symmetrical field in the Post-build actions section of
      the preceding build job called (appropriately enough) “Build other
      projects”. This field will be automatically updated in the corresponding
      build jobs whenever you modify the “Build after other projects are
      built” field. However, unlike the “Build after other projects are built”
      field, this field gives you the option to trigger a build even if the
      build is <indexterm id="I_indexterm5_d1e6325" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>triggering another build after</tertiary></indexterm><indexterm id="I_indexterm5_d1e6332" significance="normal"><primary>unstable builds</primary><secondary>triggering another build job after</secondary></indexterm>unstable (see <xref linkend="fig-hudson-new-job-trigger-build-after"/>). This is useful,
      for example, if you want to run a code quality metrics build job even if
      there are unit test failures in the default build job.</para>
      <figure float="none" id="fig-hudson-new-job-trigger-build-after">
        <title>Triggering another build job even if the current one is
        unstable</title>
        <mediaobject id="I_mediaobject5_d1e6343">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0524.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0524.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Scheduled Build Jobs</title>
      <para>Another<indexterm class="startofrange" id="ch05-regular" significance="normal"><primary>build triggers</primary><secondary sortas="regular">at regular intervals</secondary></indexterm> strategy is simply to trigger your build job at regular
      intervals. It is important to note that this is not actually Continuous
      Integration—it is simply scheduled builds, something you could also do,
      for example, as a Unix cron job. In the early days of automated builds,
      and even today in many shops, builds are not run in response to changes
      committed to version control, but simply on a nightly basis. However, to
      be effective, a Continuous Integration server should provide feedback
      much more quickly than once a day.</para>
      <para>There are nevertheless a few cases where scheduled builds do make
      sense. This includes very long running build jobs, where quick feedback
      is less critical. For example, intensive load and performance tests
      which may take several hours to run, or <indexterm id="I_indexterm5_d1e6361" significance="normal"><primary>Sonar</primary><secondary>frequency of builds</secondary></indexterm>Sonar build jobs. Sonar is an excellent way to keep tabs
      on code quality metrics across your projects and over time, but the
      Sonar server only stores one set of data per day, so running Sonar
      builds more frequently than this is not useful.</para>
      <para>For all scheduling tasks, Jenkins uses a cron-style syntax,
      consisting of five fields separated by white space in the following
      format:</para>
      <simplelist type="vert">
        <member>MINUTE HOUR DOM MONTH DOW</member>
      </simplelist>
      <para>with the following values possible for each field:</para>
      <variablelist>
        <varlistentry>
          <term>MINUTE</term>
          <listitem>
            <para>Minutes within the hour (0–59)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>HOUR</term>
          <listitem>
            <para>The hour of the day (0–23) DOM</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DOM</term>
          <listitem>
            <para>The day of the month (1–31)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>MONTH</term>
          <listitem>
            <para>The month (1–12)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>DOW</term>
          <listitem>
            <para>The day of the week (0–7) where 0 and 7 are Sunday.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>There are also a few short-cuts:</para>
      <itemizedlist>
        <listitem>
          <para>“*” represents all possible values for a field. For example,
          “* * * * *” means “once a minute.”</para>
        </listitem>
        <listitem>
          <para>You can define ranges using the “M–N” notation. For example
          “1-5” in the DOW field would mean “Monday to Friday.”</para>
        </listitem>
        <listitem>
          <para>You can use the slash notation to defined skips through a
          range. For example, “*/5” in the MINUTE field would mean “every five
          minutes.”</para>
        </listitem>
        <listitem>
          <para>A comma-separated list indicates a list of valid values. For
          example, “15,45” in the MINUTE field would mean “at 15 and 45
          minutes past every hour.”</para>
        </listitem>
        <listitem>
          <para>You can also use the shorthand values of “@yearly”,
          “@annually”, “@monthly”, “@weekly”, “@daily”, “@midnight”, and
          “@hourly”.</para>
        </listitem>
      </itemizedlist>
      <para>Typically, you will only have one line in this field, but for more
      complicated scheduling setups, you may need<indexterm id="I_indexterm5_d1e6425" class="endofrange" startref="ch05-regular" significance="normal"><primary/></indexterm> multiple lines.</para>
    </sect2>
    <sect2>
      <title>Polling the SCM</title>
      <para>As <indexterm id="I_indexterm5_d1e6433" significance="normal"><primary>build triggers</primary><secondary>polling SCM for version control changes</secondary></indexterm><indexterm id="I_indexterm5_d1e6438" significance="normal"><primary>version control systems</primary><secondary>polling for changes to trigger build</secondary></indexterm>we have seen, scheduled build jobs are usually not the
      best strategy for most <phrase role="keep-together">CI build</phrase>
      jobs. The value of any feedback is proportional to the speed in which
      you receive that feedback, and Continuous Integration is no exception.
      That is why polling the SCM is generally a better option.</para>
      <para>Polling involves asking the version control server at regular
      intervals if any changes have been committed. If any changes have been
      made to the source code in the project, Jenkins kicks off a build.
      Polling is usually a relatively cheap operation, so you can poll
      frequently to ensure that a build kicks off rapidly after changes have
      been committed. The more frequent the polling is, the faster the build
      jobs will start, and the more accurate the feedback about what change
      broke the build will be.</para>
      <para>In Jenkins, SCM polling is easy to configure, and uses the same
      cron syntax we discussed previously.</para>
      <para>The natural temptation for SCM polling is to poll as often as
      possible (for example, using “* * * * *”, or once every minute). Since
      Jenkins simply queries the version control system, and only kicks off a
      build if the source code has been modified, this approach is often
      reasonable for small projects. It shows its limits if there are a very
      large number of build jobs, as this may saturate the SCM server and the
      network with queries, many of them unnecessary. In this case, a more
      precise approach is better, where the Jenkins build job is triggered by
      the SCM when it receives a change. We discuss this option in <xref linkend="sect-build-trigger-remote"/>.</para>
      <para>If updates are frequently committed to the version control system,
      across many projects, this may cause many build jobs to be queued, which
      can in turn slow down feedback times further. You can reduce the build
      queue to some extent by polling less frequently, but at the cost of less
      precise feedback.</para>
      <para>If you are using <indexterm id="I_indexterm5_d1e6459" significance="normal"><primary>CVS</primary><secondary>polling with</secondary></indexterm>CVS, polling may not be a good option. When CVS checks for
      changes in a project, it checks each file one by one, which is a slow
      and tedious process. The best solution here is to migrate to a modern
      version control system such as Git or Subversion. The second-best
      solution is to use polling at very sparse intervals (for example, every
      30 minutes).</para>
    </sect2>
    <sect2 id="sect-build-trigger-remote">
      <title>Triggering Builds Remotely</title>
      <para>Polling <indexterm class="startofrange" id="ch05-remote1" significance="normal"><primary>build triggers</primary><secondary>remotely triggering from version control
          system</secondary></indexterm><indexterm class="startofrange" id="ch05-remote2" significance="normal"><primary>version control systems</primary><secondary>remotely triggering builds from</secondary></indexterm>can be an effective strategy for smaller projects, but it
      does not scale particularly well—with large numbers of build jobs, it is
      wasteful of network resources, and there is always a small delay between
      the code change being committed and the build job starting. A more
      precise strategy is to get the SCM system to trigger the Jenkins build
      whenever a change is committed.</para>
      <para>It is easy to start a Jenkins build job remotely. You simply
      invoke a URL of the following form:</para>
      <simplelist type="vert">
        <member>
          <emphasis>http://SERVER/jenkins/job/PROJECTNAME/build</emphasis>
        </member>
      </simplelist>
      <para>For example, if my Jenkins server was running on
      <emphasis>http://myserver:8080/jenkins</emphasis>, I could start the
      <emphasis>gameoflife</emphasis> build job by invoking the following URL
      using a tool like <literal moreinfo="none">wget</literal> or
      <literal moreinfo="none">curl</literal>:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">wget http://myserver:8080/jenkins/job/gameoflife/build</userinput></screen>
      <para>The trick, then, is to get your version control server to do this
      whenever a change is committed. The details of how to do this are
      different for each version control system. In Subversion, for example,
      you would need to write a post-commit hook script, which would trigger a
      build. You could, for example, write a Subversion hook script that
      parses the repository URL to extract the project name, and performs a
      <literal moreinfo="none">wget</literal> operation on the URL of the corresponding build
      job:</para>
      <programlisting id="I_programlisting5_d1e6510" format="linespecific">JENKINS_SERVER=http://myserver:8080/jenkins
REPOS="$1"
PROJECT=<emphasis>&lt;Regular Expression Processing Goes Here&gt;</emphasis><co id="svn-hook-1"/>
/usr/bin/wget $JENKINS_SERVER/job/${PROJECT}/build</programlisting>
      <calloutlist>
        <callout arearefs="svn-hook-1">
          <para>Use regular expression processing here to extract your project
          name from the Subversion repository URL.</para>
        </callout>
      </calloutlist>
      <para>However, this approach will only trigger one particular build, and
      relies on a convention that the default build job is based on the
      repository name in Subversion. A more flexible approach with Subversion
      is to use the Jenkins Subversion API directly, as shown here:</para>
      <programlisting id="I_programlisting5_d1e6522" format="linespecific">JENKINS_SERVER=http://myserver:8080/jenkins
REPOS="$1"
REV="$2"
UUID=`svnlook uuid $REPOS`
/usr/bin/wget \
  --header "Content-Type:text/plain;charset=UTF-8" \
  --post-data "`svnlook changed --revision $REV $REPOS`" \
  --output-document "-" \
  --timeout=2 \
  $JENKINS_SERVER/subversion/${UUID}/notifyCommit?rev=$REV</programlisting>
      <para>This would automatically start any Jenkins build jobs monitoring
      this Subversion <phrase role="keep-together">repository</phrase>.</para>
      <para>If you have activated Jenkins security, things become a little
      more complicated. In the simplest case (where any user can do anything),
      you need to activate the “Trigger builds remotely” option (see <xref linkend="fig-hudson-builds-tokens"/>), and provide a special string
      that can be used in the URL:</para>
      <simplelist type="vert">
        <member>
          <emphasis>http://SERVER/jenkins/job/PROJECTNAME/build?token=DOIT</emphasis>
        </member>
      </simplelist>
      <figure float="none" id="fig-hudson-builds-tokens">
        <title>Triggering a build via a URL using a token</title>
        <mediaobject id="I_mediaobject5_d1e6541">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0525.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0525.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>This won’t work if users need to be logged on to trigger a build
      (for example, if you are using matrix or project-based security). In
      this case, you will need to provide a user name and password, as shown
      in the following example:</para>
      <?dbfo-need height=”1in”?>
      <screen format="linespecific">$ <userinput moreinfo="none">wget http://scott:tiger@myserver:8080/jenkins/job/gameoflife/build</userinput></screen>
      <para><indexterm id="I_indexterm5_d1e6554" class="endofrange" startref="ch05-remote1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6556" class="endofrange" startref="ch05-remote2" significance="normal"><primary/></indexterm>or:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">curl -u scott:tiger http://scott:tiger@myserver:8080/jenkins/job/gameoflife/build</userinput></screen>
    </sect2>
    <sect2>
      <title>Manual Build Jobs</title>
      <para>A <indexterm id="I_indexterm5_d1e6568" significance="normal"><primary>build triggers</primary><secondary>manual</secondary></indexterm><indexterm id="I_indexterm5_d1e6573" significance="normal"><primary>build jobs</primary><secondary>triggering manually</secondary></indexterm>build does not have to be triggered automatically. Some
      build jobs should only be started manually, by human intervention. For
      example, you may want to set up an automated deployment to a UAT
      environment, that should only be started on the request of the QA folks.
      In this case, you can simply leave the Build Triggers section<indexterm id="I_indexterm5_d1e6579" class="endofrange" startref="ch05-trigger1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6581" class="endofrange" startref="ch05-trigger2" significance="normal"><primary/></indexterm> empty.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect15_d1e6584">
    <title>Les étapes de builds</title>
    <para>Maintenant, <indexterm class="startofrange" id="ch05-step" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary></indexterm>Jenkins sait où à quelle fréquence obtenir le code source du projet. La prochaine chose que vous devez expliquer à Jenkins est qu’est ce qu’il doit faire avec le code source. Dans un build Freestyle, vous pouvez faire ceci en définissant des étapes de build. Les étapes de build sont des bloques basiques de construction pour le processus de build Freestyle de Jenkins. C’est ce qui permet de dire exactement  à Jenkins <emphasis>comment</emphasis> vous voulez que votre projet soit construit.</para>
    <para>Une tâche de build peut avoir une étape, ou plusieurs. Il peut éventuellement n’en avoir aucune. Dans un build Freestyle, vous pouvez ajouter autant d’étapes de build que vous le souhaitez dans la section Build de la configuration de votre projet (voir Figure..). Dans une installation Jenkins basique, vous serez capable d’ajouter des étapes pour invoquer Maven et Ant, aussi bien que lancer des commandes shell spécifique à l’OS ou des batchs Windows. Et en installant des plugins additionnels, vous pouvez aussi intégrer d’autres outils, comme Groovy, Gradle, Grailes, Jython, MSBuild, Phing, Python, Rake, et Ruby, juste pour nommer certains des outils les plus connus.</para>
    <para>Dans le reste de cette section, nous allons plonger dans quelques-uns des types d’étapes de build les plus communs.</para>
    <sect2>
      <title>Les étapes de build Maven</title>
      <para>Jenkins <indexterm class="startofrange" id="ch05-mavenstep1" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>Maven build steps</tertiary></indexterm><indexterm class="startofrange" id="ch05-mavenstep2" significance="normal"><primary>Maven</primary><secondary sortas="build steps">build steps in freestyle build
          jobs</secondary></indexterm>a un support excellent de Maven, et les étapes de build Maven sont faciles à configurer et très flexibles. Il suffit de choisir « Invoquer les cibles Maven de haut niveau » depuis la liste des étapes de build, choisir une version de Maven à lancer (si vous avez plusieurs versions installées), et entrer les goals Maven que vous souhaitez lancer. Les tâches de build Freestyle de Jenkins fonctionnent biens avec Maven 2 et Maven 3.</para>
      <para>Tout comme en ligne de commande, vous pouvez spécifier autant de goals individuels que vous le souhaitez. Vous pouvez aussi fournir des options en ligne de commande. Quelques options utiles de Maven dans un contexte IC sont :</para>
      <variablelist>
        <varlistentry>
          <term><literal moreinfo="none">-B</literal>, <literal moreinfo="none">--batch-mode</literal></term>
          <listitem>
            <para>Cette option indique à Maven de ne pas demander d’entrée à l’utilisateur, en utilisant les valeurs par défaut si nécessaire. Si Maven demande n’importe quelle entrée durant un build Jenkins, le build sera bloqué indéfiniment.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal moreinfo="none">-U</literal>,
          <literal moreinfo="none">--update-snapshots</literal></term>
          <listitem>
            <para>Force <indexterm id="I_indexterm5_d1e6645" significance="normal"><primary>Maven</primary><secondary>SNAPSHOT dependencies</secondary></indexterm><indexterm id="I_indexterm5_d1e6650" significance="normal"><primary>SNAPSHOT dependencies</primary></indexterm>Maven à vérifier les mises à jour des dépendances de type release ou snapshot sur le dépôt distant. Cela vous permet d’être sûr que vous êtes en train de construire avec les dernières et les plus grandes dépendances snapshot, et pas uniquement les vieilles copies locales qui ne sont pas forcément synchronisées avec le code source.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">-Dsurefire.useFile=false</literal>
          </term>
          <listitem>
            <para>Cette option force Maven à écrire la sorte JUnit dans la console, au lieu de le faire des les fichiers textes dans le répertoire target comme c’est fait d’habitude. Avec ceci, n’importe quels détails de test en échec seront visibles directement dans sortie console de la tâche de build. Les fichiers XML dont Jenkins a besoin pour ses rapports de test seront toujours générés.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <figure float="none" id="fig-hudson-build-steps">
        <title>Ajouter une étape de build à une tâche de build Freestyle</title>
        <mediaobject id="I_mediaobject5_d1e6664">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0526.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0526.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Les options avancées sont également utiles (cliquez sur le bouton Avancé).</para>
      <para>Le champ optionnel <command moreinfo="none">POM</command> permet de surcharger l’emplacement par défaut du fichier <filename moreinfo="none">pom.xml</filename>. C’est l’équivalent de lancer Maven en ligne de commande <phrase role="keep-together"> avec l’option </phrase> <literal moreinfo="none">-f</literal> ou <phrase role="keep-together"><literal moreinfo="none">--file</literal></phrase>. 
       C’est utile pour certains projets multi modules où le fichier agrégé <filename moreinfo="none">pom.xml</filename> (celui contenant les sections
      <literal moreinfo="none">&lt;modules&gt;</literal>) est situé dans un sous répertoire et non au niveau supérieur.</para>
      <?dbfo-need height=”1in”?>
      <para>Le champ Properties vous permet de spécifier des valeurs de propriété qui seront passées au processus de build Maven, en utilisant le format standard de fichier illustré ici :</para>
      <programlisting id="I_programlisting5_d1e6700" format="linespecific"># Selenium test configuration
selenium.host=testserver.acme.com
selenium.port=8080
selenium.broswer=firefox</programlisting>
      <para>Ces propriétés sont passées à Maven en tant qu’options de ligne de commande, comme montré ici :</para>
      <programlisting id="I_programlisting5_d1e6705" format="linespecific">$ <userinput moreinfo="none">mvn verify -Dselenium.host=testserver.acme.com ...</userinput></programlisting>
      <para>Le champ JVM Options vous permet de spécifier des options standards de la machine virtuelle Java pour votre tâche de build. Donc, si votre processus de build est particulièrement consommateur de mémoire, vous pourriez ajouter plus d’espace pour la heap avec l’option <literal moreinfo="none">-Xmx</literal> (par exemple, 
      <literal moreinfo="none">-Xmx512m</literal> peut spécifier la taille maximum de la heap à 512 Mo).</para>
      <para>La dernière option que vous pouvez configurer est un dépôt privé Maven pour cette tâche de build. <phrase role="keep-together">Normalement</phrase>, Maven utilisera le dépôt Maven par défaut (usuellement le dossier <filename moreinfo="none">.m2/repository</filename> dans le répertoire personnel de l’utilisateur). Parfois, cela peut mener à des interférences entre tâches de build, ou utiliser des versions snapshot inconsistantes d’un build à un autre. Pour être sûr que votre build est lancé dans des conditions de laboratoire, vous pouvez activer cette option. Votre tâche de build aura son propre dépôt privé, réservé pour son utilisation exclusive. Sur le plan négatif, la première fois que la tâche de build lancera un build, cela prendra du temps pour télécharger tous les artefacts Maven, et les dépôts privés peuvent prendre beaucoup de place. Cependant, c’est la meilleure façon de garantir que votre build est lancé dans un environnement<indexterm id="I_indexterm5_d1e6725" class="endofrange" startref="ch05-mavenstep1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6727" class="endofrange" startref="ch05-mavenstep2" significance="normal"><primary/></indexterm> vraiment isolé.</para>
    </sect2>
    <sect2>
      <title>Les étapes de build Ant</title>
      <para>Les tâches <indexterm class="startofrange" id="ch05-antstep1" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>Ant build scripts</tertiary></indexterm><indexterm class="startofrange" id="ch05-antstep2" significance="normal"><primary>Ant</primary><secondary>in freestyle build steps</secondary></indexterm><indexterm id="I_indexterm5_d1e6747" significance="normal"><primary>scripts</primary><seealso>Ant; Maven</seealso></indexterm>de build Freestyle fonctionnent également biens avec Ant. <ulink url="http://ant.apache.org/">Apache Ant</ulink> est un outil de scripting de build Java largement utilisé et bien connu. En effet, un nombre important de projets Java sont liés à des scripts de build Ant.</para>
      <para>Ant n’est pas seulement utilisé comme un outil de build principal —même si votre projet utilise Maven, vous pouvez recourir à l’appel de scripts ANt pour faire des tâches spécifiques. Il y a des librairies Ant disponibles  pour beaucoup d’outils de développement et des tâches bas niveau, comme utiliser SSH, ou travailler avec des serveurs d’application propriétaires.</para>
      <para>Dans da forme la plus basique, configurer une étape de build Ant est très simple en effet,  il vous suffit de fournir la version de Ant que vous souhaitez utiliser et le nom de la target que vous voulez invoquer. Dans la figure <xref linkend="fig-hudson-build-ant-step"/>, for example, we are invoking an
      Ant script to run a JMeter test script.</para>
      <figure float="0" id="fig-hudson-build-ant-step">
        <title>Configurer une étape de build Ant</title>
        <mediaobject id="I_mediaobject5_d1e6765">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0527.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0527.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Comme dans une étape de build Maven, le bouton « Avancé… » vous fournit plus d’options détaillées, comme spécifier un script de build different, ou un script de build dans un répertoire différent (le défaut sera <filename moreinfo="none">build.xml</filename> dans le répertoire racine).
      Vous pouvez aussi spécifier des propriétés et des options de la JVM, comme vous pouvez le faire pour<indexterm id="I_indexterm5_d1e6775" class="endofrange" startref="ch05-antstep1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6777" class="endofrange" startref="ch05-antstep2" significance="normal"><primary/></indexterm> Maven.</para>
    </sect2>
    <sect2>
      <title>Exécuter une commande Batch Shell ou Windows</title>
      <para>Occasionnellement, <indexterm class="startofrange" id="ch05-script1" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>shell scripts</tertiary></indexterm><indexterm class="startofrange" id="ch05-script2" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>batch scripts</tertiary></indexterm><indexterm class="startofrange" id="ch05-script3" significance="normal"><primary>shell scripts</primary></indexterm><indexterm class="startofrange" id="ch05-script4" significance="normal"><primary>batch scripts</primary></indexterm><indexterm class="startofrange" id="ch05-script5" significance="normal"><primary>scripts</primary><secondary>shell scripts</secondary></indexterm><indexterm class="startofrange" id="ch05-script6" significance="normal"><primary>scripts</primary><secondary>batch scripts</secondary></indexterm>vous pouvez avoir besoin d’exécuter une commande directement au niveau du système d’exploitation. Certains processus de build ancien sont liés à des scripts spécifiques à l’OS, par exeple. Dans d’autres cas, vous pourriez avoir besoin d’effectuer un opérateur bas niveau qui serait plus facilement faite avec une commande au niveau OS.</para>
      <para>Vous pouvez faire ceci avec Jenkins avec une commande <literal moreinfo="none">Exécuter un script shell</literal> (pour Unix) ou <literal moreinfo="none">Exécuter une ligne de commande batch Windows </literal>(pour Windows). Par exemple, dans la Figure <xref linkend="fig-hudson-build-shell-step"/>, nous avons ajouté une étape pour exécuter la commande Unix <literal moreinfo="none">ls</literal>.</para>
      <figure float="none" id="fig-hudson-build-shell-step">
        <title>Configurer une étape Exécuter un script Shell</title>
        <mediaobject id="I_mediaobject5_d1e6832">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0528.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0528.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>La sortie de l’étape de build est montrée ici :</para>
      <programlisting id="I_programlisting5_d1e6839" format="linespecific">[workspace] $ /bin/sh -xe /var/folders/.../jenkins2542160238803334344.s
+ ls -al
total 64
drwxr-xr-x  14 johnsmart  staff   476 30 Oct 15:21 .
drwxr-xr-x   9 johnsmart  staff   306 30 Oct 15:21 ..
-rw-r--r--@  1 johnsmart  staff   294 22 Sep 01:40 .checkstyle
-rw-r--r--@  1 johnsmart  staff   651 22 Sep 01:40 .classpath
-rw-r--r--@  1 johnsmart  staff   947 22 Sep 01:40 .project
drwxr-xr-x   5 johnsmart  staff   170 22 Sep 01:40 .settings
-rw-r--r--@  1 johnsmart  staff   437 22 Sep 01:40 .springBeans
drwxr-xr-x   9 johnsmart  staff   306 30 Oct 15:21 .svn
-rw-r--r--@  1 johnsmart  staff  1228 22 Sep 01:40 build.xml
-rw-r--r--@  1 johnsmart  staff    50 22 Sep 01:40 infinitest.filters
-rw-r--r--   1 johnsmart  staff  6112 30 Oct 15:21 pom.xml
drwxr-xr-x   5 johnsmart  staff   170 22 Sep 01:40 src
drwxr-xr-x   3 johnsmart  staff   102 22 Sep 01:40 target
drwxr-xr-x   5 johnsmart  staff   170 22 Sep 01:40 tools</programlisting>
      <para>Vous pouvez soit exécuter une commande spécifique à l’OS (ex : <literal moreinfo="none">ls</literal>), soit stocker un script plus compliqué comme un fichier dans votre gestionnaire de contrôle de version, et exécuter ce script. Si vous exécutez un script, vous n’avez juste qu’à faire référence au nom de votre script relativement par rapport au répertoire de travail.</para>
      <para>Les scripts Shell sont exécutés en utilisant l’option <literal moreinfo="none">-ex</literal> — les commandes sont affichées dans la console, comme si c’était la sortie. Si n’importe laquelle des commandes exécutées retourne une valeur différente de zéro, le build échouera.</para>
      <para> Lorsque Jenkins exécute un script, il spécifie un nombre en tant que variable d’environnement que vous pouvez utiliser à l’intérieur de votre script. Nous discutons de ces variables plus en détail dans le prochaine section.</para>
      <para>En réalité, il y a beaucoup de bonnes raisons pour lesquelles vous devriez éviter d’utiliser des scripts de niveau OS dans vos tâches de build si vous pouvez les éviter. En particulier, il rend votre tâche de build au meilleur des cas, spécifique à l’OS, et dans le pire dépendant de la configuration précise de la machine. Une alternative plus portable pour exécuter des scripts spécifiques à l’OS est d’écrire un script équivalent dans un langage de script plus portable, comme <indexterm id="I_indexterm5_d1e6855" class="endofrange" startref="ch05-script1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6857" class="endofrange" startref="ch05-script2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6859" class="endofrange" startref="ch05-script3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6861" class="endofrange" startref="ch05-script4" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6863" class="endofrange" startref="ch05-script5" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e6865" class="endofrange" startref="ch05-script6" significance="normal"><primary/></indexterm> Groovy ou Gant.</para>
    </sect2>
    <sect2 id="sect-hudson-environment-variables">
      <title>Utiliser les variables d’environnement Jenkins dans vos builds</title>
      <para>Une <indexterm class="startofrange" id="ch05-env1" significance="normal"><primary>environment variables</primary><secondary>using in build steps</secondary></indexterm><indexterm class="startofrange" id="ch05-env2" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>environment variables in</tertiary></indexterm><indexterm id="I_indexterm5_d1e6885" significance="normal"><primary>environment variables</primary><seealso>astuce utile qui peut être utilisée dans pratiquement n’importe quelle étape de build est d’obtenir des informations de la part de Jenkins sur la tâche de build courante. En réalité, lorsque Jenkins démarre une étape de build, il met à disposition les variables d’environnement suivantes dans le script de build :</para>
      <variablelist>
        <varlistentry>
          <term>
            <literal moreinfo="none">BUILD_NUMBER</literal>
            <indexterm id="I_indexterm5_d1e6896" significance="normal">
              <primary>BUILD_NUMBER environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Le numéro du build courant, comme “153”.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">BUILD_ID</literal>
            <indexterm id="I_indexterm5_d1e6906" significance="normal">
              <primary>BUILD_ID environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Un horodatage pour identifier le build courant, sous le format YYYY-MM-DD_hh-mm-ss.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">JOB_NAME</literal>
            <indexterm id="I_indexterm5_d1e6916" significance="normal">
              <primary>JOB_NAME environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Le nom du job, comme <emphasis>game-of-life</emphasis>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">BUILD_TAG</literal>
            <indexterm id="I_indexterm5_d1e6929" significance="normal">
              <primary>BUILD_TAG environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Un moyen commode d’identifier la tâche de build courante, sous la forme
            <literal moreinfo="none">jenkins-${<replaceable>JOB_NAME</replaceable>}-${<replaceable>BUILD_NUMBER</replaceable>}</literal>
            (ex :
            <literal moreinfo="none">jenkins-game-of-life-2010-10-30_23-59-59</literal>).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">EXECUTOR_NUMBER</literal>
            <indexterm id="I_indexterm5_d1e6951" significance="normal">
              <primary>EXECUTOR_NUMBER environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Un nombre identifiant l’exécuteur ayant démarré cette construction parmi les exécuteurs sur la même machine. C’est le nombre que vous voyez dans « Etat du lanceur de construction », à l’exception que ce nombre commence de 0, pas 1.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">NODE_NAME</literal>
            <indexterm id="I_indexterm5_d1e6961" significance="normal">
              <primary>NODE_NAME environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Le nom de l’esclave si ce build est en train d’être lancé sur un esclave, ou <literal moreinfo="none">""</literal> si le build est en train d’être lancé sur le maître.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">NODE_LABELS</literal>
            <indexterm id="I_indexterm5_d1e6974" significance="normal">
              <primary>NODE_LABELS environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>La liste des libellés  associés au nœud sur lequel le build est démarré.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">JAVA_HOME</literal>
            <indexterm id="I_indexterm5_d1e6984" significance="normal">
              <primary>JAVA_HOME environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Si votre tâche est configurée pour utiliser une version spécifique de JDK, cette variable contient la valeur du <literal moreinfo="none">JAVA_HOME</literal> correspondant au JDK spécifié. Lorsque cette variable est fixée, la variable <literal moreinfo="none">PATH</literal> est aussi mise à jour pour avoir <filename moreinfo="none">$JAVA_HOME/bin</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">WORKSPACE</literal>
            <indexterm id="I_indexterm5_d1e7003" significance="normal">
              <primary>WORKSPACE environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Le chemin absolu du répertoire de travail.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">HUDSON_URL</literal>
            <indexterm id="I_indexterm5_d1e7013" significance="normal">
              <primary>HUDSON_URL environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>L’URL complète du serveur Jenkins, par exemple <filename moreinfo="none">http://ci.acme.com:8080/jenkins/</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">JOB_URL</literal>
            <indexterm id="I_indexterm5_d1e7026" significance="normal">
              <primary>JOB_URL environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>L’URL complète pour cette tâche de build, par exemple <filename moreinfo="none">http://ci.acme.com:8080/jenkins/game-of-life</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">BUILD_URL</literal>
            <indexterm id="I_indexterm5_d1e7040" significance="normal">
              <primary>BUILD_URL environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>L’URL complète de ce build, par exemple <filename moreinfo="none">http://ci.acme.com:8080/jenkins/game-of-life/20</filename>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">SVN_REVISION</literal>
            <indexterm id="I_indexterm5_d1e7053" significance="normal">
              <primary>SVN_REVISION environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Pour les projets basés sur Subversion, cette variable contient le numéro de la révision courante.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal moreinfo="none">CVS_BRANCH</literal>
            <indexterm id="I_indexterm5_d1e7063" significance="normal">
              <primary>CVS_BRANCH environment variable</primary>
            </indexterm>
          </term>
          <listitem>
            <para>Pour les projets basés sur CVS, cette variable contient la branche du module. Si CVS est configuré pour consulter le trunk, cette variable d’environnement ne sera pas spécifiée.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Ces <indexterm id="I_indexterm5_d1e7071" significance="normal"><primary>Ant</primary><secondary>environment variables, accessing from</secondary></indexterm>variables sont faciles à utiliser. Dans un script Ant, vous pouvez y accéder avec le tag <literal moreinfo="none">&lt;property&gt;</literal> comme montré ici :</para>
      <programlisting id="I_programlisting5_d1e7080" format="linespecific">&lt;target name="printinfo"&gt;
  &lt;property environment="env" /&gt;
  &lt;echo message="${env.BUILD_TAG}"/&gt;
&lt;/target&gt;</programlisting>
      <para>Dans Maven, <indexterm id="I_indexterm5_d1e7084" significance="normal"><primary>Maven</primary><secondary>environment variables in</secondary></indexterm>vous pouvez accéder au variables soit de la même manière (en utilisant le prefix « env. »), soit directement en utilisant la variable d’environnement Jenkins. Par exemple, dans le fichier <emphasis>pom.xml</emphasis>, l’URL du projet pointera sur la tâche de build Jenkins qui a lancé le build <literal moreinfo="none">mvn site</literal> :</para>
      <programlisting id="I_programlisting5_d1e7096" format="linespecific">&lt;project...&gt;
  ...
  &lt;groupId&gt;com.wakaleo.gameoflife&lt;/groupId&gt;
  &lt;artifactId&gt;gameoflife-core&lt;/artifactId&gt;
  &lt;version&gt;0.0.55-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;gameoflife-core&lt;/name&gt;
  &lt;url&gt;${JOB_URL}&lt;/url&gt;</programlisting>
      <para>Alternativement, si vous construises une application web, vous pouvez aussi utiliser <filename moreinfo="none">maven-war-plugin</filename> pour insérer le numéro de la tâche de build dans le manifest de l’application web, ex :</para>
      <programlisting id="I_programlisting5_d1e7103" format="linespecific">&lt;project&gt;
  ...
  &lt;build&gt;
    ...
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;
        &lt;configuration&gt;
          &lt;manifest&gt;
            &lt;addDefaultImplementationEntries&gt;true&lt;/addDefaultImplementationEntries&gt;
          &lt;/manifest&gt;
          &lt;archive&gt;
            &lt;manifestEntries&gt;
              &lt;Specification-Title&gt;${project.name}&lt;/Specification-Title&gt;
              &lt;Specification-Version&gt;${project.version}&lt;/Specification-Version&gt;
              &lt;Implementation-Version&gt;${BUILD_TAG}&lt;/Implementation-Version&gt;
            &lt;/manifestEntries&gt;
          &lt;/archive&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
      ...
    &lt;/plugins&gt;
  &lt;/build&gt;
  ...
&lt;/project&gt;</programlisting>
      <para>Cela produire un fichier <filename moreinfo="none">MANIFEST.MF</filename> avec les lignes suivantes :</para>
      <programlisting id="I_programlisting5_d1e7110" format="linespecific">Manifest-Version: 1.0
Archiver-Version: Plexus Archiver
Created-By: Apache Maven
Built-By: johnsmart
Build-Jdk: 1.6.0_22
Jenkins-Build-Number: 63
Jenkins-Project: game-of-life
Jenkins-Version: 1.382
Implementation-Version: jenkins-game-of-life-63
Specification-Title: gameoflife-web
Specification-Version: 0.0.55-SNAPSHOT</programlisting>
      <para>Dans un <indexterm id="I_indexterm5_d1e7115" significance="normal"><primary>Groovy scripts</primary><secondary>environment variables in</secondary></indexterm>script Groovy, elles peuvent être accéder via la méthode 
      <literal moreinfo="none">System.getenv()</literal> :</para>
      <programlisting id="I_programlisting5_d1e7124" format="linespecific">def env = System.getenv()
env.each {
    println it
}</programlisting>
      <para><indexterm id="I_indexterm5_d1e7127" class="endofrange" startref="ch05-env1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7129" class="endofrange" startref="ch05-env2" significance="normal"><primary/></indexterm>ou :</para>
      <programlisting id="I_programlisting5_d1e7132" format="linespecific">def env = System.getenv()
println env['BUILD_NUMBER']</programlisting>
    </sect2>
    <sect2>
      <title>Exécuter des scripts Groovy</title>
      <para>Groovy<indexterm class="startofrange" id="ch05-groovy1" significance="normal"><primary>Groovy scripts</primary><secondary>running in build jobs</secondary></indexterm><indexterm class="startofrange" id="ch05-groovy2" significance="normal"><primary>freestyle build jobs</primary><secondary>build steps in</secondary><tertiary>Groovy scripts</tertiary></indexterm><indexterm class="startofrange" id="ch05-groovy3" significance="normal"><primary>scripts</primary><secondary>Groovy scripts</secondary></indexterm> n’est pas seulement un langage dynamique populaire de la JVM, c’est aussi un langage qui convient pour le scripting de bas niveau. Le <ulink url="http://wiki.jenkins-ci.org//display/HUDSON/Groovy+Plugin">plugin Groovy</ulink> de Jenkins vous permet d’exécuter des commandes Groovy arbitraires, ou invoquer des scripts Groovy, dans le cadre de votre processus de build.</para>
      <para>Une fois que vous avez installé le plugin Groovy avec la manière habituelle, vous aurez besoin d’ajouter une référence de votre installation Groovy dans la page de configuration du système (voir la figure <xref linkend="fig-hudson-groovy-installation"/>).</para>
      <figure float="none" id="fig-hudson-groovy-installation">
        <title>Ajouter une installation Groovy à Jenkins</title>
        <mediaobject id="I_mediaobject5_d1e7167">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0529.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0529.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Maintenant, vous pouvez ajouter du script Groovy dans votre tâche de build. Lorsque vous cliquez sur ‘Ajouter une étape de build’, vous verrez deux nouvelles entrées dans le menu déroulant : « Exécuter un script Groovy » et « Exécuter un script Groovy Système ».
      La première option est généralement celle que vous <phrase role="keep-together">souhaitez — </phrase>cela exécutera simplement un script Groovy dans une JVM séparée, comme si vous l’invoquiez depuis la ligne de commande. La deuxième option lance des commandes Groovy depuis la JVM de Jenkins, avec un accès interne complet à Jenkins, et est principalement utilisé pour manipuler les tâches de build de Jenkins ou le processus de build lui-même. C’est un sujet plus avancé dont nous discuterons plus loin dans ce livre.</para>
      <para>Une étape de build Groovy peut prendre une forme sur deux. Pour les cas simples, vous pouvez juste ajouter un petit bout de Groovy, comme montré dans la figure <xref linkend="fig-hudson-groovy-build-step"/>. Pour les cas plus complexes ou compliqués, vous pouvez probablement écrire un script Groovy et le placer sous un système de contrôle de version. Une fois que votre script est en sûreté dans votre SCM, vous pouvez le démarrer en sélectionnant l’option « Fichier de script Groovy » et fournir le chemin de votre script (relatif au workspace de la tâche de build).</para>
      <figure float="none" id="fig-hudson-groovy-build-step">
        <title>Lancer des commandes Groovy dans le cadre d’une tâche de build</title>
        <mediaobject id="I_mediaobject5_d1e7184">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0530.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0530.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <?dbfo-need height=”1in”?>
      <para>Dans la figure <xref linkend="fig-hudson-groovy-fitnesse-build-step"/>, vous pouvez voir un exemple légèrement plus compliqué. Ici nous lançons un script Groovy appelé <filename moreinfo="none">run-fitness-tests.groovy</filename>, qui peut être trouvé dans le répertoire <filename moreinfo="none">scripts</filename>. Ce script prend des suites de test pour être exécutés comme ses paramètres — nous pouvons les mettre dans le champ Paramètres Groovy. Sinon vous pouvez aussi fournir des propriétés en ligne de commande dans le champ Propriétés — c’est simplement un moyen plus pratique d’utiliser l’option <literal moreinfo="none">-D</literal> en ligne de commande pour passer des valeurs de propriétés <indexterm id="I_indexterm5_d1e7203" class="endofrange" startref="ch05-groovy1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7205" class="endofrange" startref="ch05-groovy2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7208" class="endofrange" startref="ch05-groovy3" significance="normal"><primary/></indexterm> au script Groovy.</para>
      <figure float="none" id="fig-hudson-groovy-fitnesse-build-step">
        <title>Lancer des scripts Groovy dans le cadre d’une tâche de build</title>
        <mediaobject id="I_mediaobject5_d1e7214">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0531.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0531.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Construire des projets dans d’autres langages</title>
      <para>Jenkins<indexterm id="I_indexterm5_d1e7224" significance="normal"><primary>scripts</primary><secondary>languages supported</secondary></indexterm> est un outil flexible, il peut être utilisé avec beaucoup plus de de langage que Java et Groovy. Par exemple, Jenkins fonctionne aussi très bien avec Grails, .Net, Ruby, Python et PHP, juste pour en nommer quelques uns. En utilisant d’autres langages, vous aurez généralement besoin d’installer un plugin supportant votre langage favori, qui ajoutera un nouveau type d’étape de build pour ce langage.Nous regarderons <indexterm id="I_indexterm5_d1e7230" class="endofrange" startref="ch05-step" significance="normal"><primary/></indexterm>d’autres exemples dans la section <xref linkend="using-jenkins-with-other-languages"/>.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect15_d1e7235">
    <title>Les actions à la suite du build</title>
    <para>Une fois<indexterm class="startofrange" id="ch05-post" significance="normal"><primary>freestyle build jobs</primary><secondary>post-build actions</secondary></indexterm> qu’un build est terminé, il y a toujours des petites choses à voir après. Vous pourriez avoir besoin d’archiver certains artefacts générés, faire des rapports sur les résultats des tests, et notifier des personnes sur les résultats. Dans cette section, nous allons regarder certaines des tâches les plus courantes que vous aurez besoin de configurer après que le build est effectué.</para>
    <sect2>
      <title>Rapport sur les résultats de tests</title>
      <para>L'une<indexterm class="startofrange" id="ch05-report1" significance="normal"><primary>freestyle build jobs</primary><secondary>reporting on test results</secondary></indexterm><indexterm class="startofrange" id="ch05-report2" significance="normal"><primary>tests</primary><secondary>reports from</secondary><tertiary>JUnit reports</tertiary></indexterm><indexterm class="startofrange" id="ch05-report3" significance="normal"><primary>reporting</primary><secondary>test results</secondary><tertiary>JUnit reports</tertiary></indexterm> des exigences les plus évidentes sur une tâche de build est de faire des rapports sur les résultats des tests. Non seulement s’il y a des échecs aux tests, mais aussi combien de tests sont exécutés, en combien de temps, et ainsi de suite. Dans le monde Java, JUnit est la librairie de test la plus couramment utilisée, et le format XML JUnit pour les résultats de test est très utilisé et aussi bien compris par les autres outils.</para>
      <para>Jenkins fournit un grand support pour les rapports de test. Dans une tâche de build freestyle, vous devez cocher l’option « Publier le rapport des résultats de tests JUnit », et fournir un chemin vers vos fichiers de rapport JUnit (voir <xref linkend="fig-hudson-build-job-junit"/>). Vous pouvez utiliser une expression générique (comme <literal moreinfo="none">**/target/surefire-reports/*.xml</literal>
      dans un projet Maven) pour inclure les rapports JUnit depuis un grand nombre de répertoires différents — Jenkins agrégera les résultats dans un seul rapport.</para>
      <figure float="none" id="fig-hudson-build-job-junit">
        <title>Rapport sur les résultats de tests</title>
        <mediaobject id="I_mediaobject5_d1e7281">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0532.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0532.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Nous regarderons les tests automatisés plus<indexterm id="I_indexterm5_d1e7288" class="endofrange" startref="ch05-report1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7290" class="endofrange" startref="ch05-report2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7292" class="endofrange" startref="ch05-report3" significance="normal"><primary/></indexterm> en détail dans le chapitre <xref linkend="chapter-automated-testing"/>.</para>
    </sect2>
    <sect2>
      <title>Archiver les résultats de build</title>
      <para>A <indexterm class="startofrange" id="ch05-archive1" significance="normal"><primary>freestyle build jobs</primary><secondary>archiving binary artifacts</secondary></indexterm><indexterm class="startofrange" id="ch05-archive2" significance="normal"><primary>archives of binary artifacts</primary><secondary sortas="free-style">in freestyle build jobs</secondary></indexterm><indexterm class="startofrange" id="ch05-archive3" significance="normal"><primary>binary artifacts</primary><secondary>archiving</secondary><tertiary sortas="free-style">in freestyle build jobs</tertiary></indexterm>quelques exceptions près, le but principal d’une tâche de build est généralement de construire quelque chose. Dans Jenkins, nous appelons cette chose un artefact. Un artefact pourrait être un exécutable binaire (un fichier JAR ou WAR pour un projet Java, par exemple), ou certains autres livrables liés, comme de la documentation ou du code source. Une tâche de build peut stocker un ou plusieurs différents artefacts, gardant uniquement la dernière copie ou chaque artefact tous les builds.</para>
      <para>Configurer Jenkins pour stocker vos artefacts est simple — cochez la case à cocher « Archiver les artefacts » dans les Actions à la suite de build, et spécifier quels artefacts vous voulez stocker (voir la figure <xref linkend="fig-hudson-build-job-artifact-configuration"/>).</para>
      <figure float="none" id="fig-hudson-build-job-artifact-configuration">
        <title>Configurer les artefacts de builds</title>
        <mediaobject id="I_mediaobject5_d1e7327">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0533.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0533.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Dans le champ « Fichiers à archiver », vous pouvez spécifier les chemins complets des fichiers que vous souhaitez archiver (relatif au workspace du job), ou, utiliser un caractère générique (ex. : <literal moreinfo="none">**/*.jar</literal>, pour tous les fichiers JAR, n’importe où dans le workspace). L’un des avantages d’utiliser des caractères génériques est qu’il permet de rendre votre build moins dépendant de votre configuration de gestion de version. Par exemple, si vous utilisez Subversion (voir la section <xref linkend="sect-subversion"/>), Jenkins va parcourir votre projet directement depuis le workspace, ou depuis un sous-répertoire, en fonction de votre configuration. Si vous utilisez un caractère générique comme <literal moreinfo="none">**/target/*.war</literal>, Jenkins trouvera le fichier indépendamment du répertoire où est positionné le projet.</para>
      <para>Comme d’habitude, le bouton Avancé donne accès à quelques options supplémentaires. Si vous utilisez un caractère générique pour trouver vos artefacts, vous pourriez avoir besoin d’exclure certains répertoires dans la recherche. Vous pouvez faire ceci en remplissant le champ Exclusions. Vous entrez un modèle de nom de fichier que vous <emphasis>ne souhaitez pas</emphasis> archiver, même s’ils seraient normalement inclus par le champ "Fichiers à archiver".</para>
      <para>Les artefacts archivés peuvent prendre beaucoup de place sur le disque, en particulier si les builds sont fréquents. Pour cette raison, vous pouvez vouloir garder uniquement le dernier en succès. Pour faire ceci, il suffit de cocher l’option « Supprime tous les artefacts, à l'exception du dernier artefact stable ou construit avec succès, afin de gagner de l'espace disque ». Jenkins gardera les artefacts des derniers builds stables (s’il y en a). Il gardera aussi les artefacts du dernier build instable construit juste après un build stable (s’il y a), et également du dernier build en échec qui est arrivé.</para>
      <para>Les artefacts de build archivés apparaissent sur la page des résultats de build (voir la figure <xref linkend="fig-hudson-build-artifact"/>). Les artefacts de build les plus récents sont aussi affichés dans la page d’accueil d’un job.</para>
      <figure float="none" id="fig-hudson-build-artifact">
        <title>Les artefacts de build sont affichés sur la page de résultat d’un build et la page d’accueil d’un job</title>
        <mediaobject id="I_mediaobject5_d1e7356">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0534.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0534.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Vous pouvez aussi utiliser les URLs permanentes pour accéder aux artefacts de build les plus récents. Il s'agit d'une excellente façon de réutiliser les derniers artefacts de vos builds, que ce soit depuis des tâches de build Jenkins ou depuis des scripts externes, par exemple. Trois URLs sont disponibles : dernier build stable, dernier build en succès et dernier build construit.</para>
      <para>Avant que nous regardions les URLs, nous devrions discuter du concept de builds 
      <emphasis>stables</emphasis> et <emphasis>en succès</emphasis>.</para>
      <para>Un build est <emphasis>en succès</emphasis> lorsque la compilation n’est pas signalée en erreur.</para>
      <para>Un build est <indexterm id="I_indexterm5_d1e7379" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>criteria for</tertiary></indexterm><indexterm id="I_indexterm5_d1e7386" significance="normal"><primary>unstable builds</primary><secondary>criteria for</secondary></indexterm>considéré <emphasis>stable</emphasis> s’il a été construit avec succès, et qu’aucun éditeur ne l’a signalé comme instable. Par exemple, dépendamment de votre configuration de projet, des échecs de tests unitaires, une couverture de code insuffisante, ou d’autres problèmes de qualité de code, peuvent provoquer la mise à l’état instable d’un build. Donc un build stable est toujours en succès, mais l’inverse n’est pas nécessairement vrai — un build peut être en succès sans être nécessairement stable.</para>
      <para>Un build <emphasis>complet</emphasis> est simplement un build qui a fini, peu importe son résultat. A noter que l’étape d’archivage aura lieu quel que soit le résultat de la construction.</para>
      <para>Le format des URLs d’artefact est intuitif, et prend la forme suivante :</para>
      <variablelist>
        <varlistentry>
          <term>Dernier build stable</term>
          <listitem>
            <para>
              <filename moreinfo="none"><replaceable>&lt;server-url&gt;</replaceable>/job/<replaceable>&lt;build-job&gt;</replaceable>/lastStableBuild/artifact/<replaceable>&lt;path-to-artifact&gt;</replaceable></filename>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Dernier build en succès</term>
          <listitem>
            <para>
              <filename moreinfo="none"><replaceable>&lt;server-url&gt;</replaceable>/job/<replaceable>&lt;build-job&gt;</replaceable>/lastSuccessfulBuild/artifact/<replaceable>&lt;path-to-artifact&gt;</replaceable></filename>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Dernier build complet</term>
          <listitem>
            <para>
              <filename moreinfo="none"><replaceable>&lt;server-url&gt;</replaceable>/job/<replaceable>&lt;build-job&gt;</replaceable>/lastCompletedBuild/artifact/<replaceable>&lt;path-to-artifact&gt;</replaceable></filename>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>C’est mieux illustré par quelques exemples. Supposez que votre serveur Jenkins est démarré sur <emphasis>http://myserver:8080</emphasis>, votre job de construction se nomme <filename moreinfo="none">game-of-life</filename>, et vous stockez un fichier appelé <filename moreinfo="none">gameoflife.war</filename>, qui est dans le répertoire target de votre workspace. Les URLs pour cet artefact seraient les suivantes :</para>
      <variablelist>
        <varlistentry>
          <term>Dernier build stable</term>
          <listitem>
            <para>
              <filename moreinfo="none">http://myserver:8080/job/gameoflife/lastStableBuild/artifact/target/gameoflife.war</filename>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Dernier build en succès</term>
          <listitem>
            <para>
              <filename moreinfo="none">http://myserver:8080/job/gameoflife/lastSuccessfulBuild/artifact/target/gameoflife.war</filename>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Dernier build complet</term>
          <listitem>
            <para>
              <filename moreinfo="none">http://myserver:8080/job/gameoflife/lastCompletedBuild/artifact/target/gameoflife.war</filename>
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Les  artefacts peuvent ne pas juste être des exécutables binaires. Imaginez, par exemple, que votre processus de build implique de déployer automatiquement tous les builds sur un server de test. Pour plus de commodités, vous voulez garder une copie du code source exact associé à chaque fichier WAR déployé. Une manière de faire cela serait de générer le code source associé à un build, et d’archiver à la fois ce fichier le fichier WAR. Nous pouvons faire ceci en générant le fichier JAR contenant le code source de l’application (par exemple, en utilisant le Maven Source Plugin pour un projet Maven), et ensuite inclure celui-ci dans la liste des artefacts à stocker (voir la figure <xref linkend="fig-hudson-archiving-source"/>).</para>
      <figure float="0" id="fig-hudson-archiving-source">
        <title>Archiver le code source et un paquet binaire</title>
        <mediaobject id="I_mediaobject5_d1e7485">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0535.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0535.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Bien sûr, cet exemple est un peu académique : il serait probablement plus simple de juste utiliser le numéro de révision pour ce build (qui est affiché sur la page de résultat du build) pour retrouver le code source depuis votre système de gestion de version. Mais vous voyez l’idée.</para>
      <para>Notez que si vous utiliser un gestionnaire de dépôt d’entreprise comme Nexus ou Artifcatory pour stocker vos artefacts binaires, vous n’auriez pas besoin de les garder sur le serveur Jenkins. Vous pourriez simplement préférer déployer automatiquement vos artefacts dans votre gestionnaire de dépôt d’entreprise dans le cadre de la construction de votre job, et de les y retrouver lorsque<indexterm id="I_indexterm5_d1e7494" class="endofrange" startref="ch05-archive1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7496" class="endofrange" startref="ch05-archive2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7498" class="endofrange" startref="ch05-archive3" significance="normal"><primary/></indexterm> c’est nécessaire.</para>
    </sect2>
    <sect2>
      <title>Notifications</title>
      <para>Le <indexterm class="startofrange" id="ch05-notif1" significance="normal"><primary>freestyle build jobs</primary><secondary>notifications sent after</secondary></indexterm><indexterm class="startofrange" id="ch05-notif2" significance="normal"><primary>notifications</primary><secondary sortas="free-style">from freestyle build job</secondary></indexterm>but d’un serveur IC est de permettre d’informer les gens lorsqu’un build est rompu. Dans Jenkins, cela se passe dans la rubrique Notification.</para>
      <para>Jenkins fournit le support des notifications par email. Vous pouvez l’activer en cochant la case à cocher « Notifier par email »dans les actions à la suite du build (voir <xref linkend="fig-hudson-build-job-email"/>). Ensuite, entrez les adresses emails des membres de l’équipe qui doivent savoir lorsqu’un build est rompu. Lorsqu’un build est rompu, Jenkins enverra un message amical aux utilisateurs dans la liste contenant un lien vers les builds rompus.</para>
      <figure float="0" id="fig-hudson-build-job-email">
        <title>Notification par email</title>
        <mediaobject id="I_mediaobject5_d1e7524">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0536.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0536.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Vous pouvez aussi opter pour envoyer un email séparé à l’utilisateur dont le commit à (probablement) rompu le build. Pour que cela fonctionne, vous devez avoir activé la sécurité dans votre serveur Jenkins (voir la figure <xref linkend="chapter-security"/>).</para>
      <para>Normalement, Jenkins enverra une notification par email à chaque fois qu’un build échouera (par exemple, à cause d’une erreur de compilation). Il enverra aussi une notification lorsque le build devient <indexterm id="I_indexterm5_d1e7535" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>notifications for</tertiary></indexterm><indexterm id="I_indexterm5_d1e7542" significance="normal"><primary>unstable builds</primary><secondary>notifications for</secondary></indexterm>instable pour la première fois (par exemple, s’il y a des tests en échecs). A moins que vous le configurer pour faire ça, Jenkins n’enverra pas d’emails pour chaque build instable, mais uniquement pour le premier.</para>
      <para>Finalement, Jenkins enverra un message lorsque un build précédemment en échec ou instable réussi, pour permettre d’informer tout le monde que le problème a été<indexterm id="I_indexterm5_d1e7550" class="endofrange" startref="ch05-notif1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7552" class="endofrange" startref="ch05-notif2" significance="normal"><primary/></indexterm> résolu.</para>
    </sect2>
    <sect2>
      <title>Construire d’autres projets</title>
      <para>Vous <indexterm id="I_indexterm5_d1e7560" significance="normal"><primary>freestyle build jobs</primary><secondary>starting other build jobs in</secondary></indexterm>pouvez aussi démarrer d’autres constructions de job dans les actions à la suite du build, en utilisant l’option « Construire d’autres projets (projets en aval) ». Ceci est utile si vous souhaitez organiser votre processus de build en plusieurs, plus petites étapes, à la place d’une seul longue construction de job. Il suffit de lister les projets que vous souhaitez démarrer après celui-ci. Normalement, ces projets seront déclenchés uniquement si le build est stable, mais vous pouvez optionnellement déclencher d’autre construction de job même si le build courant est <indexterm id="I_indexterm5_d1e7566" significance="normal"><primary>build jobs</primary><secondary>unstable build from</secondary><tertiary>triggering another build after</tertiary></indexterm><indexterm id="I_indexterm5_d1e7573" significance="normal"><primary>unstable builds</primary><secondary>triggering another build job after</secondary></indexterm>instable. Cela peut être utile, par exemple, si vous voulez démarrer une construction de job effectuant des rapports sur des mesures de qualité de code après une construction de job principal du projet, même s’il y a des tests en échecs dans le<indexterm id="I_indexterm5_d1e7579" class="endofrange" startref="ch05-post" significance="normal"><primary/></indexterm> build principal.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect15_d1e7582">
    <title>Démarrer votre nouvelle tâche de build</title>
    <para>Maintenant,<indexterm id="I_indexterm5_d1e7587" significance="normal"><primary>freestyle build jobs</primary><secondary>running</secondary></indexterm> tout ce que vous devez faire est sauver votre nouveau job de construction. Vous pouvez alors déclencher le premier build manuellement, ou juste en attendant que celui-ci se déclenche de lui-même. Une fois que le build est terminé, vous pouvez cliquer sur le numéro du build pour voir les résultats de votre travail.</para>
  </sect1>
  <sect1 id="sect-build-jobs-maven">
    <title>Travailler avec des tâches de build Maven</title>
    <para>Dans <indexterm class="startofrange" id="ch05-mavenjob" significance="normal"><primary>Maven build jobs</primary></indexterm>cette section, nous allons avoir un aperçu de l’autre type de tâche de build communément utilisé : les tâches de build Maven 2/3.</para>
    <para>Les tâches de build Maven sont spécifiquement adaptées pour les builds Maven 2 et Maven 3. Créer une tâche de build Maven nécessite considérablement moins de travail que son équivalent en tâche de build <phrase role="keep-together">Freestyle</phrase>. Les tâches de build Maven supportent les fonctionnalités avancées liées à Maven comme les builds incrémentaux sur les projets multi-modules et les builds déclenchés par des changements sur des dépendances en snapshot, et permettent une configuration et des rapports plus simples.</para>
    <para>Cependant, il y a un hic : les tâches de build Maven 2/3 sont moins flexibles que les tâches de build Freestyle, et ne supportent pas des étapes de build multiples dans la même tâche de build. Certains utilisateurs ont aussi signalés que les gros projets Maven tendent à être plus lents et utilisent plus de mémoire lorsqu’ils sont configurés avec des tâches de build Maven au lieu de leur équivalent en Freestyle.</para>
    <para>Dans cette section, nous allons enquêter pour savoir comment configurer des builds Maven 2/3, quand les utiliser, ainsi que leurs avantages et inconvénients.</para>
    <para>Pour <indexterm id="I_indexterm5_d1e7613" significance="normal"><primary>Maven build jobs</primary><secondary>creating</secondary></indexterm>créer une nouvelle tâche de build, il suffit de choisir l’option « Construire un projet Maven 2/3 » dans la page Nouveau Job (voir <xref linkend="fig-hudson-build-job-new-mvn2"/>).</para>
    <figure float="none" id="fig-hudson-build-job-new-mvn2">
      <title>Créer une nouvelle tâche de build Maven</title>
      <mediaobject id="I_mediaobject5_d1e7624">
        <imageobject role="print">
          <imagedata fileref="figs/print/jtdg_0547.pdf" format="PDF"/>
        </imageobject>
        <imageobject role="web">
          <imagedata fileref="figs/web/jtdg_0547.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <sect2>
      <title>Construire dès lors qu’une dépendance SNAPSHOT est construite</title>
      <para>A première <indexterm class="startofrange" id="ch05-mavtrigger1" significance="normal"><primary>Maven</primary><secondary>SNAPSHOT dependencies</secondary></indexterm><indexterm class="startofrange" id="ch05-mavtrigger2" significance="normal"><primary>SNAPSHOT dependencies</primary></indexterm>vue, l’écran de configuration d’une tâche de build Maven 2/3 est très similaire à celle que nous avions vu pour les tâches de build dans la section précédente. La première différence que vous pouvez noter est dans la section Ce qui déclenche le build. Dans cette section, une option supplémentaire est disponible « Lance un build à chaque fois qu'une dépendance SNAPSHOT est construite ». Si vous sélectionnez cette option, Jenkins examinera votre fichier <filename moreinfo="none">pom.xml</filename> (ou les fichiers)pour regarder si aucunes dépendances SNAPSHOT sont en train d’être construire par d’autres tâches de build. Si n’importe laquelle des tâches de build met à jour une dépendance SNAPSHOT que votre projet utilise, Jenkins construira aussi votre projet.</para>
      <para>Typiquement dans Maven, les dépendances SNAPSHOT sont utilisées pour partager la toute dernière version d’une librairie avec d’autres projets de la même équipe. Comme elles sont par définition instables, ce n’est pas une pratique recommandée de lier des dépendances SNAPSHOT avec d’autres équipes ou depuis des sources externes.</para>
      <para>Par exemple, imaginiez que vous êtes en train de travailler sur une nouvelle application web <emphasis>game-of-life</emphasis>. Vous utilisez Maven pour votre projet, donc vous pouvez utiliser une tâche de build Maven dans Jenkins. Votre équipe travaille aussi sur une librairie réutilisable appelée <emphasis>cooltools</emphasis>. Comme ces deux projets sont développés par la même équipe, vous utilisez certaines des dernières fonctionnalités de <emphasis>cooltools</emphasis> dans l’application <emphasis>game-of-life</emphasis>. vous avez une dépendance SNAPSHOT dans la section <code>&lt;dependencies&gt;</code> du fichier <filename moreinfo="none">pom.xml</filename> de <emphasis>game-of-life</emphasis> :</para>
      <programlisting id="I_programlisting5_d1e7672" format="linespecific">    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.acme.common&lt;/groupId&gt;
            &lt;artifactId&gt;cooltools&lt;/artifactId&gt;
            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
        ...
    &lt;/dependencies&gt;</programlisting>
      <para>Dans votre serveur Jenkins, vous avez configuré des tâches de build Maven à la fois pour l’application <emphasis>cooltools</emphasis> et <emphasis>game-of-life</emphasis>. Comme votre projet <emphasis>game-of-life</emphasis> a besoin de la dernière version SNAPSHOT de <emphasis>cooltools</emphasis>, vous cochez l’option « Lance un build à chaque fois qu'une dépendance SNAPSHOT est construite ». Comme cela, dès lors que le projet <emphasis>cooltools</emphasis> est reconstruit, le projet <emphasis>game-of-life</emphasis> sera aussi <indexterm id="I_indexterm5_d1e7695" class="endofrange" startref="ch05-mavtrigger1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e7697" class="endofrange" startref="ch05-mavtrigger2" significance="normal"><primary/></indexterm>automatiquement reconstruit.</para>
    </sect2>
    <sect2>
      <title>Configurer un build Maven</title>
      <para>La <indexterm id="I_indexterm5_d1e7705" significance="normal"><primary>Maven build jobs</primary><secondary>build steps in</secondary></indexterm>prochaine section où vous noterez un changement est la section Build. Dans une tâche de build Maven, la section Build est entièrement dévoué au lancement d’un seul goal Maven (voir la figure <xref linkend="fig-hudson-build-job-maven2"/>). Dans cette section, vous spécifiez la version de Maven que vous voulez exécuter (rappelez-vous, en tant que job Maven, cela ne fonctionnera qu’avec Maven), la position du fichier <filename moreinfo="none">pom.xml</filename>, et le goal Maven (ou les goals) à invoquer. Vous pouvez aussi ajouter n’importe quelles options de ligne de commande que vous voulez ici.</para>
      <figure float="none" id="fig-hudson-build-job-maven2">
        <title>Spécifier les goals Maven</title>
        <mediaobject id="I_mediaobject5_d1e7719">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0548.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0548.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Dans beaucoup de cas, c’est tout ce que vous aurez besoin de faire pour configurer une tâche de build Maven. Cependant, si vous cliques sur le bouton « Avancé… », vous pouvez cocher certaines fonctionnalités avancées (<xref linkend="fig-hudson-build-job-maven2-advanced"/>).</para>
      <figure float="0" id="fig-hudson-build-job-maven2-advanced">
        <title>Les tâches de build Maven — les options avancées</title>
        <mediaobject id="I_mediaobject5_d1e7731">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0549.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0549.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>L’option de build incrémental<indexterm id="I_indexterm5_d1e7738" significance="normal"><primary>Maven build jobs</primary><secondary>incremental builds</secondary></indexterm> est très pratique pour les grands builds multi modules Maven. Si vous cochez cette option, lorsqu’un changement est effectué sur l’un des modules du projet, Jenkins reconstruira uniquement ce module et les modules qui utilisent le module modifié. Il fait cette magie en utilisant certaines nouvelles fonctionnalités introduites par Maven 2.1 (donc cela ne fonctionnera pas si vous utilisez Maven 2.0.x). Jenkins détecte quels modules a été modifiés, et utilise l’option <literal moreinfo="none">-pl</literal> (<literal moreinfo="none">--project-list</literal>) pour construire uniquement les modules mis à jour, et l’option <literal moreinfo="none">-amd</literal> (<literal moreinfo="none">--also-make-dependents</literal>) pour construire aussi les modules qui utilises les modules mis à jour. Si rien n’a été modifié dans le code source, tous les modules sont construits.</para>
      <para>Par défault, Jenkins<indexterm id="I_indexterm5_d1e7758" significance="normal"><primary>Maven build jobs</primary><secondary>archiving binary artifacts, disabling</secondary></indexterm><indexterm id="I_indexterm5_d1e7763" significance="normal"><primary>archives of binary artifacts</primary><secondary>disabling</secondary></indexterm><indexterm id="I_indexterm5_d1e7768" significance="normal"><primary>binary artifacts</primary><secondary>archiving</secondary><tertiary>disabling</tertiary></indexterm> archivera tous les artefacts générés par une tâche de build Maven. Cela peut être utile à certains moments, mais cela peut aussi être très coûteux en place sur le disque. Si vous souhaitez désactiver cette option, il suffit de cocher l’option « Désactive l’archivage automatique des artefacts ». Alternativement, vous pouvez toujours limiter les artefacts stockés en utilisant l’option « Supprimer les anciens builds» tout en haut de la page de configuration.</para>
      <para>L’option « Construire les modules en parallèle »<indexterm id="I_indexterm5_d1e7778" significance="normal"><primary>Maven build jobs</primary><secondary>running modules in parallel</secondary></indexterm> informe Jenkins qu’il peut démarrer chaque module individuellement en parallèle comme un build séparé. En théorie, cela pourrait rendre un peu plus rapide les constructions. En pratique, cela fonctionnera réellement si vos modules sont totalement indépendants (si vous n’utilisez pas d’agrégation), ce qui est rarement le cas. Si vous pensez que construire vos modules en parallèle peut réellement accélérer votre projet multi module, vous pouvez avoir envie d’utiliser un build freestyle avec Maven 3 et sa nouvelle fonctionnalité de construction parallèle.</para>
      <para>Une autre <indexterm id="I_indexterm5_d1e7786" significance="normal"><primary>Maven build jobs</primary><secondary>private repository for</secondary></indexterm>option utile est « Utiliser une repository Maven privé ». Normalement, lorsque Jenkins démarre Maven, il se comportera exactement de la même manière que Maven en ligne de commande : il stockera les artefacts et retrouvera les artefacts depuis le dépôt Maven local (dans <filename moreinfo="none">~/.m2/repository</filename> si vous ne l’avez pas configuré dans le fichier <filename moreinfo="none">settings.xml</filename>). Ceci est efficient en terme d’espace disque, mais pas souvent idéal pour des constructions en IC. En effet, si plusieurs tâches de build sont en construction avec les mêmes artefacts en SNAPSHOT, les constructions peuvent finir par se gêner les unes avec les autres.</para>
      <para>Lorsque cette option est sélectionnée, Jenkins demande à Maven d’utiliser <filename moreinfo="none">$WORKSPACE/.repository</filename>comme dépôt local Maven. Cela signifie que chaque job aura son propre dépôt Maven isolé pour lui tout seul. Cela règle les problèmes ci-dessus, au détriment de la consommation d'espace disque supplémentaire.</para>
      <para>Avec cette option, Maven utilisera un dépôt Maven dédié pour cette tâche de build, situé dans le répertoire <filename moreinfo="none">$WORKSPACE/.repository </filename>. Ceci prend plous d’espace disque, mais garantie une meilleur isolation pour nos tâches de build.</para>
      <para>Une autre approche pour ce problème est de redéfinir l’emplacement par défaut du dépôt en utilisant la propriété <literal moreinfo="none">maven.repo.local</literal>, comme montré ici :</para>
      <programlisting id="I_programlisting5_d1e7814" format="linespecific">$ <userinput moreinfo="none">mvn install -Dmaven.repo.local=~/.m2/staging-repository</userinput></programlisting>
      <para>Cette approche à l’avantage d’être capable de partager un dépôt entre certaines tâches de builds, ce qui est utile si vous souhaitez faire une série de builds liés. Cela fonctionnera aussi avec des tâches Freestyle.</para>
    </sect2>
    <sect2>
      <title>Les actions à la suite du build</title>
      <para>Les <indexterm id="I_indexterm5_d1e7825" significance="normal"><primary>Maven build jobs</primary><secondary>Post-build Actions</secondary></indexterm>actions à la suite du build dans une tâche de build Maven est considérablement simple à configurer comparé à une tâche Freestyle. C’est simplement parce que, puisque c’est un build Maven, Jenkins sait où chercher un certain nombre de sortie du build. Les artefacts, rapports de test, Javadoc, en ainsi de suite, sont tous générés dans les répertoires standards, ce qui signifie que <emphasis>vous</emphasis> n’avez pas besoin de préciser à Jenkins où trouver ces éléments. Donc Jenkins trouvera, et effectuera automatiquement des rapports sur des résultats de test JUnit, par exemple. Plus loin dans ce livre, nous verrons comment les projets Maven simplifient aussi la configuration de beaucoup d’outils de mesure de qualité de code et de rapports.</para>
      <para>Beaucoup des autres actions à la suite du build sont similaires à ceux que nous avons <phrase role="keep-together">vus</phrase> dans une tâche de build Freestyle.</para>
    </sect2>
    <sect2 id="sect-builds-deploy-enterprise-repository">
      <title>Déployer vers un gestionnaire de dépôt d’entreprise</title>
      <para>Une <indexterm class="startofrange" id="ch05-erm1" significance="normal"><primary>Maven build jobs</primary><secondary>deploying artifacts to Enterprise Repository
          Manager</secondary></indexterm><indexterm class="startofrange" id="ch05-erm2" significance="normal"><primary>Enterprise Repository Manager</primary></indexterm><indexterm class="startofrange" id="ch05-erm3" significance="normal"><primary>archives of binary artifacts</primary><secondary>deploying to Enterprise Repository Manager</secondary></indexterm><indexterm class="startofrange" id="ch05-erm4" significance="normal"><primary>binary artifacts</primary><secondary>archiving</secondary><tertiary>deploying to Enterprise Repository Manager</tertiary></indexterm>option supplémentaire qui apparait dans les tâches de build Maven est la capacité de déployer vos artefacts vers un dépôt Maven (voir la figure <xref linkend="fig-hudson-maven2-deploy"/>). Un gestionnaire de dépôt d’entreprise est un serveur qui agit à la fois comme un proxy/cache pour des artefacts publics de Maven, et comme un serveur de stockage centralisé pour vos propres artefacts internes. Des gestionnaires de dépôt d’entreprise open source comme Nexus (de Sonatype) et Artifactory (de JFrog) fournissent des fonctionnalités de maintenance et d’administration puissantes qui permettent de configurer et maintenir vos dépôts Maven très simplement. Ces deux produits ont des versions commerciales, avec des fonctionnalités additionnelles  visant à construire des infrastructures plus sophistiquées ou haut de gamme.</para>
      <para>L’avantage d’avoir Jenkins qui déploie vos artefacts (à l’opposé de simplement faire <literal moreinfo="none">mvn deploy</literal>) est que, si vous avez un build Maven multi module, les artefacts seront déployés uniquement lorsque le build entier a fini avec succès. Par exemple, supposons que vous ayez un projet Maven multi module avec cinq modules. Si vous lancez <literal moreinfo="none">mvn deploy</literal>, et que le build échoue après trois modules, les deux premiers modules vont avoir été déployés vers votre dépôt, mais pas les trois premiers, qui laissent votre dépôt dans un état instable. Faire en sorte que Jenkins faire le déploiement assure que les artefacts sont déployés comme un groupe une fois que le build a terminé avec succès.</para>
      <figure float="0" id="fig-hudson-maven2-deploy">
        <title>Déployer des artefacts vers un dépôt Maven</title>
        <mediaobject id="I_mediaobject5_d1e7878">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0550.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0550.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Pour faire cela,  il suffit de cocher l’option « Déployer les artefacts dans le repository Maven » dans les actions à la suite du build. Vous aurez besoin de spécifier l’URL du dépôt sur lequel vous voulez déployer. Il faut que cela soit l’URL complète vers le dépôt (ex : <emphasis>http://nexus.acme.com/nexus/content/repositories/snapshots</emphasis>, et pas juste <emphasis>http://nexus.acme.com/nexus</emphasis>)</para>
      <para>La plupart des dépôts ont besoin de vous authentifier avant de vous laisser déployer des artefacts. La manière standard de Maven pour faire cela est de placer <literal moreinfo="none">&lt;server&gt;</literal> dans votre fichier <filename moreinfo="none">settings.xml</filename> local, comme montré ici :</para>
      <programlisting id="I_programlisting5_d1e7899" format="linespecific">&lt;settings...&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nexus-snapshots&lt;/id&gt;
      &lt;username&gt;scott&lt;/username&gt;
      &lt;password&gt;tiger&lt;/password&gt;
    &lt;/server&gt;
    &lt;server&gt;
      &lt;id&gt;nexus-releases&lt;/id&gt;
      &lt;username&gt;scott&lt;/username&gt;
      &lt;password&gt;tiger&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;</programlisting>
      <para>Pour les personnes qui souhaitent plus de sécurité, vous pouvez aussi encrypter ces mots de passe si besoin est.</para>
      <para>Ensuite, entrez l’identifiant correspondant dans le champ Identifiant du repository de Jenkins. Jenkins sera alors capable de retrouver le bon nom d’utilisateur et mot de passe, et de déployer vos artefacts. Une fois que le build sera terminé, vos artefacts devraient être disponibles sur votre dépôt d’entreprise Maven (voir la figure <xref linkend="fig-nexus-artifact-deployed"/>).</para>
      <figure float="0" id="fig-nexus-artifact-deployed">
        <title>Après déploiement, l’artefact devrait être disponible sur votre gestionnaire de dépôt d’entreprise</title>
        <mediaobject id="I_mediaobject5_d1e7910">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0551.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0551.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>En utilisant cette option, vous n’avez pas toujours besoin de déployer tout de suite — vous pouvez toujours revenir en arrière et redéployer des artefacts d’une version précédente. Il suffit de cliquer sur le menu « Redéployer les artefacts » à gauche et spécifier l’URL du dépôt sur lequel vous voulez redéployer votre artefact (voir la figure <xref linkend="fig-hudson-redeploy-artifact"/>). Comme dans l’exemple précédent, le bouton Avancé vous permet de spécifier l’identifiant pour le tag <literal moreinfo="none">&lt;server&gt;</literal>dans votre fichier <filename moreinfo="none">settings.xml</filename> local. Comme vous pourrez voir plus loin dans ce livre, vous pour aussi utiliser ce déploiement dans le cadre d’un processus de promotion de buid en configurant un déploiement automatique vers un dépôt différent lorsque certaines métriques de qualité sont satisfaites, par exemple.</para>
      <figure float="0" id="fig-hudson-redeploy-artifact">
        <title>Redéployer un artefact</title>
        <mediaobject id="I_mediaobject5_d1e7929">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0552.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0552.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Cette approche fonctionnera bien pour n’importe quel gestionnaire de dépôt d’entreprise. Cependant, si vous utilisez <indexterm id="I_indexterm5_d1e7936" significance="normal"><primary>Artifactory</primary><secondary>Enterprise Repository Manager</secondary></indexterm><indexterm id="I_indexterm5_d1e7941" significance="normal"><primary>plugins</primary><secondary>Artifactory</secondary></indexterm>Artifactory, vous pourriez préférer installer le <ulink url="http://wiki.jenkins-ci.org/display/JENKINS/Artifactory+Plugin">plugin Artifactory</ulink> de Jenkins, qui fournit une intégration bidirectionnelle vers le gestionnaire de dépôt d’entreprise Artifactory. Il fonctionne en envoyant des informations supplémentaires au serveur Artifactory durant le déploiement, permettant au serveur d’avoir un lien vers le build qui a généré un artefact donné. Une fois que vous avez installé le plugin, vous pouvez l’activer dans votre tâche de build Maven en cochant l’option « Deploy artifacts to Artifactory » dans les actions à la suite du build. Ensuite vous choisissez sur quel dépôt votre projet doit déployer dans une liste de dépôt sur le serveur, avec le nom d’utilisateur et le mot de passe requis pour faire le déploiement (voir la figure <xref linkend="fig-maven2-artifactory"/>).</para>
      <figure float="none" id="fig-maven2-artifactory">
        <title>Déployer vers Artifactory depuis Jenkins</title>
        <mediaobject id="I_mediaobject5_d1e7955">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0553.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0553.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Votre tâche de build déploiera automatiquement vers Artifactory. En supplément, un lien vers l’artefact sur le serveur sera maintenant affiché sur la page d’accueil de la tâche de build et la page de résultat des builds (voir la figure <xref linkend="fig-maven2-artifactory-link"/>).</para>
      <figure float="none" id="fig-maven2-artifactory-link">
        <title>Jenkins affiche un lien vers le dépôt Artifactory correspondant</title>
        <mediaobject id="I_mediaobject5_d1e7967">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0554.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0554.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Ce lien vous emmène sur une page sur le serveur Artifactory contenant  les artefacts déployés (voir la figure <xref linkend="fig-artifactory-artifact"/>). Depuis cette page, il y a aussi un lien pour vous ramener vers la page du build qui a construit cet artefact.</para>
      <figure float="0" id="fig-artifactory-artifact">
        <title>Voir l’artefact déployé sur Artifactory</title>
        <mediaobject id="I_mediaobject5_d1e7979">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0555.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0555.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Déployer vers des gestionnaires de dépôt d’entreprise commerciales</title>
      <para>Un gestionnaire de dépôt d’entreprise  est une partie essentielle de n’importe quelle infrastructure de développement de logiciel basé sur Maven. Ils jouent aussi un rôle clé pour les projets non basés sur Maven utilisant des outils tels que Ivy ou Gradle, chacun d’eux étant liés aux dépôts standards de Maven.</para>
      <para>Chacun des principaux gestionnaires de dépôt d’entreprise, <indexterm id="I_indexterm5_d1e7992" significance="normal"><primary>Nexus</primary><secondary>Enterprise Repository Manager</secondary></indexterm><indexterm id="I_indexterm5_d1e7997" significance="normal"><primary>Artifactory</primary><secondary>Enterprise Repository Manager</secondary></indexterm>Nexus and Artifactory, propose des versions professionnelles qui fournissent des fonctionnalités supplémentaires avec Jenkins. Plus loin dans ce livre,  nous discuterons comment vous pouvez utiliser des fonctionnalités avancées comme la gestion de release et de staging de Nexus Pro pour implémenter des stratégies sophistiquées de promotion de build. Sur l’aspect déploiement, l’édition commerciale d’Artifactory (Artifactory Pro Power Pack) étend l’intégration bidirectionnelle que nous avons vu plus tôt. Lorsque vous voyez un artefact sur le navigateur du dépôt, un onglet ‘Builds’ affiche les détails sur le build <phrase role="keep-together">Jenkins</phrase> Jenkins qui a créé l’artefact, et un lien vers la page du build sur Jenkins (voir la figure <xref linkend="fig-artifactory-pro-artifact"/>). Artifactory assure également le suivi des dépendances qui ont été utilisées dans le build Jenkins, et vous alertera si vous essayez de les supprimer depuis<indexterm id="I_indexterm5_d1e8008" class="endofrange" startref="ch05-erm1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8010" class="endofrange" startref="ch05-erm2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8012" class="endofrange" startref="ch05-erm3" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8015" class="endofrange" startref="ch05-erm4" significance="normal"><primary/></indexterm> le dépôt.</para>
      <figure float="0" id="fig-artifactory-pro-artifact">
        <title>Voir les artefacts déployés et le build Jenkins correspondant dans Artifactory</title>
        <mediaobject id="I_mediaobject5_d1e8021">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0556.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0556.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Gérer les modules</title>
      <para>Lorsque <indexterm id="I_indexterm5_d1e8031" significance="normal"><primary>Maven build jobs</primary><secondary>modules for, managing</secondary></indexterm>vous utilisez Maven, il est habituel de découper le projet en plusieurs modules. Les tâches de build Maven ont un connaissance intrinsèque des projets multi modules, et ajoute un élément Modules au menu qui vous permet d’afficher la structure du projet d’un coup d’œil (voir la figure <xref linkend="fig-maven2-modules"/>).</para>
      <figure float="0" id="fig-maven2-modules">
        <title>Gérer les modules dans une tâche de build Maven</title>
        <mediaobject id="I_mediaobject5_d1e8042">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0557.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0557.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Cliquer sur l’un des modules vous permettra d’afficher la page de build pour ce module. A partir de la, vous pouvez voir les résultats détaillés des builds pour chaque module, déclencher un build pour un module isolé, et si nécessaire, affiner la configuration d’un module, surchargeant ainsi la configuration global du projet.</para>
    </sect2>
    <sect2>
      <title>Les étapes de build supplémentaires dans votre tâche de build Maven</title>
      <para>Par <indexterm id="I_indexterm5_d1e8054" significance="normal"><primary>Maven build jobs</primary><secondary>build steps in</secondary></indexterm>Par défaut, une tâche de build Maven ne permet qu’un seul goal Maven. Il y a des fois ou c’est assez limitatif, et vous voudriez ajouter des étapes supplémentaires avant ou après la build principal. Vous pouvez faire ceci avec le plugin <indexterm id="I_indexterm5_d1e8060" significance="normal"><primary>plugins</primary><secondary>Jenkins M2 Extra Steps</secondary></indexterm><indexterm id="I_indexterm5_d1e8065" significance="normal"><primary>Jenkins M2 Extra Steps plugin</primary></indexterm> M2 Extra Steps de Jenkins. Ce plugin vous permet d’ajouter des étapes de builds normales avant et après le goal Maven principal, vous donnant la flexibilité d’une tâche de build Freestyle tout en gardant l’avantage de la configuration d’une tâche de build Maven.</para>
      <para>Installez le plugin et allez dans la section Environnements de Build de votre tâche de build. Cochez l’option « Configure M2 Extra Build Steps ». Vous devriez pouvoir maintenant ajouter des étapes de build qui seront ajoutées avant et/ou après que votre goal Maven principal <indexterm id="I_indexterm5_d1e8071" class="endofrange" startref="ch05-mavenjob" significance="normal"><primary/></indexterm> soit exécuté (voir la figure <xref linkend="fig-m2-extra-steps"/>).</para>
      <figure float="none" id="fig-m2-extra-steps">
        <title>Configurer des étapes de build Maven supplémentaires</title>
        <mediaobject id="I_mediaobject5_d1e8079">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0558.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0558.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>
  <sect1 id="using-jenkins-with-other-languages">
    <title>Using Jenkins with Other Languages</title>
    <para>As we mentioned earlier, Jenkins provides excellent support for
    other languages. In this section, we will look at how to use Jenkins with
    a few of the more common ones.</para>
    <sect2>
      <title>Building Projects with Grails</title>
      <para>Grails<indexterm class="startofrange" id="ch05-grails1" significance="normal"><primary>Grails</primary><secondary>builds in, running with Jenkins</secondary></indexterm><indexterm class="startofrange" id="ch05-grails2" significance="normal"><primary>freestyle build jobs</primary><secondary>Grails projects in</secondary></indexterm> is an open source dynamic web application framework built
      on Groovy and many well-established open source Java frameworks such as
      Spring and Hibernate.</para>
      <para>Jenkins provides excellent support for Grails builds. First, you
      need to install the Jenkins <ulink url="http://wiki.jenkins-ci.org/display/HUDSON/Grails+Plugin">Grails
      plugin</ulink>. Once you have installed this and restarted Jenkins, you
      will need to provide at least one version of Grails for Jenkins to use
      in the Grails Builder section of the Configure System screen (see <xref linkend="fig-hudson-build-job-grails-builder"/>).</para>
      <figure float="0" id="fig-hudson-build-job-grails-builder">
        <title>Adding a Grails installation to Jenkins</title>
        <mediaobject id="I_mediaobject5_d1e8115">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0537.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0537.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Now you can set up a freestyle build job to build your Grails
      project. The Grails plugin adds the “Build with Grails” build step,
      which you can use to build your Grails application (see <xref linkend="fig-hudson-build-job-grails"/>). Here, you provide the Grails
      target, or targets, you want to execute. Unlike the command line, you
      can execute several targets in the same command. However, if you need to
      pass any arguments to a particular target, you should enclose the target
      and its arguments in double quotes. In <xref linkend="fig-hudson-build-job-grails"/>, for example, we run
      <literal moreinfo="none">grails clean</literal>, followed by <literal moreinfo="none">grails test-app
      -unit -non-interactive</literal>. To get this to work properly, we
      enclose the options of the second command in quotes, which gives us
      <literal moreinfo="none">grails clean "test-app -unit
      -non-interactive"</literal>.</para>
      <figure float="0" id="fig-hudson-build-job-grails">
        <title>Configuring a Grails build step</title>
        <mediaobject id="I_mediaobject5_d1e8138">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0538.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0538.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>The Grails build step takes many optional parameters. For example,
      Grails is finicky about versions—if your project was created by an older
      version, Grails will ask you to upgrade it. To be on the safe side, for
      example, you may want to tick the Force Upgrade checkbox, which makes
      sure that runs a <literal moreinfo="none">grails upgrade --non-interactive</literal>
      before it runs the main targets.</para>
      <para>You can also specify the server port (useful if you are executing
      web tests), and any other properties you want to pass<indexterm id="I_indexterm5_d1e8150" class="endofrange" startref="ch05-grails1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8152" class="endofrange" startref="ch05-grails2" significance="normal"><primary/></indexterm> to the build.</para>
    </sect2>
    <sect2>
      <title>Building Projects with Gradle</title>
      <para>
        <emphasis>Contributed by Rene Groeschke</emphasis>
      </para>
      <para>In <indexterm class="startofrange" id="ch05-gradle1" significance="normal"><primary>Gradle</primary><secondary>builds in, running with Jenkins</secondary></indexterm><indexterm class="startofrange" id="ch05-gradle2" significance="normal"><primary>freestyle build jobs</primary><secondary>Gradle projects in</secondary></indexterm>comparison to the build tool veterans Ant and Maven,
      <ulink url="http://gradle.org">Gradle</ulink> is a relatively new open
      source build tool for the Java Virtual Machine. Build scripts for Gradle
      are written in a Domain Specific Language (DSL) based on Groovy. Gradle
      implements convention over configuration, allows direct access to Ant
      tasks, and uses Maven-like declarative dependency management. The
      concise nature of Groovy scripting lets you write very expressive build
      scripts with very little code, albeit at the cost of loosing the IDE
      support that exists for established tools like Ant and Maven.</para>
      <para>There are two different ways to run your Gradle builds with
      Jenkins. You can either use the Gradle plugin for Jenkins or the Gradle
      wrapper functionality.</para>
      <sect3 id="the-gradle-plugin-for-hudson">
        <title>The Gradle plugin for Jenkins</title>
        <para>You can install the Gradle plugin in the usual way—just go to
        the Manage Plugins screen and select the Jenkins Gradle plugin. Click
        Install and restart your Jenkins <phrase role="keep-together">instance</phrase>.</para>
        <para>Once Jenkins has restarted, you will need to configure your new
        Gradle plugin. You should now find a new Gradle section in your
        Configure System screen. Here you will need to add the Gradle
        installation you want to use. The process is similar to that used for
        the other tool installations. First, click the Add Gradle button to
        add a new Gradle installation, and enter an appropriate name (see
        <xref linkend="fig-gradle-plugin"/>). If Gradle has already been
        installed on your build server, you can point to the local Gradle home
        directory. Alternatively, you can use the “Install automatically”
        feature to download a Gradle installation, in the form of a ZIP or
        GZipped TAR file, directly from a URL. You can use a public URL (see
        <ulink url="http://gradle.org/downloads.html"/>), or may prefer
        to make these installations available on a local server
        instead.</para>
        <figure float="none" id="fig-gradle-plugin">
          <title>Configuring the Gradle plugin</title>
          <mediaobject id="I_mediaobject5_d1e8196">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0539.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0539.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>You typically use Freestyle build jobs to configure your Gradle
        builds. When you add a build step to a Freestyle build job, you will
        now have a new option called “Invoke Gradle script”, which lets you
        add Gradle specific settings to your build job.</para>
        <para>As an example, here is a very simple Gradle build script. It is
        a simple Java project that uses a Maven directory structure and a
        Maven repository manager. There is a customizable task, called
        <emphasis>uploadArchives</emphasis>, to deploy the generated archive
        to the local Enterprise repository manager:</para>
        <programlisting id="I_programlisting5_d1e8208" format="linespecific">apply plugin:'java'
apply plugin:'maven'

version='1.0-SNAPSHOT'
group = "org.acme"

repositories{
  mavenCentral()
    mavenRepo urls: 'http://build.server/nexus/content/repositories/public'
}

dependencies{
  testCompile "junit:junit:4.8.2"
}

uploadArchives {
  repositories.mavenDeployer {
    configuration = configurations.archives
      repository(url: "http://build.server/nexus/content/repositories/snapshots") {
        authentication(userName: "admin", password: "password")
     }
  }
}</programlisting>
        <para>In <xref linkend="fig-gradle-build-job"/>, we use the just
        configured “Gradle-0.9RC2” instance to run this Gradle build. In this
        case, we want to run the JUnit tests and upload the build artifacts to
        our local Maven repository. Furthermore we configure our job to
        collect the test results from
        <filename moreinfo="none">**/build/test-results</filename>, the default directory for
        storing test results in Gradle.</para>
      </sect3>
      <sect3 id="incremental-builds">
        <title>Incremental builds</title>
        <para>While running a Gradle build job with unchanged sources, Gradle
        runs its builds incremental. If the output of a Gradle task is still
        available and the sources haven’t changed since the last build, Gradle
        is able to skip the task execution and marks the according task as
        up-to-date. This incremental build feature can decrease the duration
        of a running build job considerably.</para>
        <para>If Gradle evaluates the test task as up-to-date even the
        execution of your unit tests is skipped. This can cause problems when
        running your Gradle build with Jenkins. In our sample build job above
        we configured a post build action to publish the JUnit reports of our
        build. If the test task is skipped by Gradle, the Jenkins job will be
        marked as failed with the following message:</para>
        <blockquote>
          <para>Test reports were found but none of them are new. Did tests
          run?</para>
        </blockquote>
        <para>You can easily fix this by invalidating the output and force a
        re-execution of your tests by adding the following snippet to your
        Gradle file:</para>
        <screen format="linespecific">test {
    outputs.upToDateWhen { false }
}</screen>
        <figure float="none" id="fig-gradle-build-job">
          <title>Setting up a Gradle build job</title>
          <mediaobject id="I_mediaobject5_d1e8234">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0540.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0540.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>After adding the snippet above to your build file, your job
        console output should look like the one in <xref linkend="gradle-incremental-build"/>.</para>
        <figure float="none" id="gradle-incremental-build">
          <title>Incremental Gradle job</title>
          <mediaobject id="I_mediaobject5_d1e8246">
            <imageobject role="print">
              <imagedata fileref="figs/print/jtdg_0541.pdf" format="PDF"/>
            </imageobject>
            <imageobject role="web">
              <imagedata fileref="figs/web/jtdg_0541.png" format="PNG"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>As you can see, all of the tasks except
        <emphasis>test</emphasis> and <emphasis>uploadArchives</emphasis> have
        been marked as up-to-date and not<indexterm id="I_indexterm5_d1e8259" class="endofrange" startref="ch05-gradle1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8261" class="endofrange" startref="ch05-gradle2" significance="normal"><primary/></indexterm> executed.</para>
      </sect3>
    </sect2>
    <sect2>
      <title>Building Projects with Visual Studio MSBuild</title>
      <para>Jenkins<indexterm class="startofrange" id="ch05-net1" significance="normal"><primary>freestyle build jobs</primary><secondary sortas="NET projects">.NET projects in</secondary></indexterm><indexterm class="startofrange" id="ch05-net2" significance="normal"><primary sortas="NET projects">.NET projects</primary></indexterm><indexterm class="startofrange" id="ch05-net3" significance="normal"><primary>Visual Studio MSBuild</primary></indexterm> is a Java application, but it also provides excellent
      support for .NET projects.</para>
      <para>To build .NET projects in Jenkins, you need to install the
      <indexterm id="I_indexterm5_d1e8283" significance="normal"><primary>plugins</primary><secondary>MSBuild</secondary></indexterm><indexterm id="I_indexterm5_d1e8288" significance="normal"><primary>MSBuild plugin</primary></indexterm><ulink url="http://wiki.jenkins-ci.org/display/HUDSON/MSBuild+Plugin">MSBuild
      plugin</ulink>.</para>
      <para>You may also want to install the <indexterm id="I_indexterm5_d1e8296" significance="normal"><primary>MSTest plugin</primary></indexterm><indexterm id="I_indexterm5_d1e8299" significance="normal"><primary>plugins</primary><secondary>MSTest</secondary></indexterm><ulink url="http://wiki.jenkins-ci.org//display/HUDSON/MSTest+Plugin">MSTest
      plugin</ulink> and the <ulink url="http://wiki.jenkins-ci.org//display/HUDSON/NUnit+Plugin">NUnit
      plugin</ulink>, to display your test results.</para>
      <para>Once you have installed the .NET plugins and restarted Jenkins,
      you need to configure your .NET build tools. Go to the Configure System
      page and specify the path of the MSBuild executable (see <xref linkend="fig-hudson-msbuild-config"/>).</para>
      <figure float="none" id="fig-hudson-msbuild-config">
        <title>Configuring .NET build tools in Jenkins</title>
        <mediaobject id="I_mediaobject5_d1e8317">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0542.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0542.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Once you have this set up, you can return to your freestyle
      project and add your .NET build step configuration.</para>
      <para>Go to the Build section and choose “Build a Visual project or
      solution using MSBuild” option in the Add Build Step menu. Then enter
      the path to your MSBuild build script (a <filename moreinfo="none">.proj</filename> or <filename moreinfo="none">.sln</filename> file), along with any command-line
      options your build <indexterm id="I_indexterm5_d1e8332" class="endofrange" startref="ch05-net1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8334" class="endofrange" startref="ch05-net2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8336" class="endofrange" startref="ch05-net3" significance="normal"><primary/></indexterm>requires (see <xref linkend="fig-hudson-msbuild-step"/>).</para>
      <figure float="none" id="fig-hudson-msbuild-step">
        <title>A build step using MSBuild</title>
        <mediaobject id="I_mediaobject5_d1e8344">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0543.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0543.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2>
      <title>Building Projects with NAnt</title>
      <para>Another<indexterm id="I_indexterm5_d1e8354" significance="normal"><primary>NAnt build scripts</primary></indexterm><indexterm id="I_indexterm5_d1e8357" significance="normal"><primary>freestyle build jobs</primary><secondary>NAnt build scripts in</secondary></indexterm> way to build your .NET projects is to use NAnt. NAnt is a
      .NET version of the Ant build scripting tool widely used in the Java
      world. NAnt build scripts are XML files (typically with a <filename moreinfo="none">.build</filename> extension), with a very similar format
      to Ant build scripts.</para>
      <para>To build with NAnt in Jenkins, you need to install the Jenkins
      <indexterm id="I_indexterm5_d1e8368" significance="normal"><primary>NAnt plugin</primary></indexterm><indexterm id="I_indexterm5_d1e8371" significance="normal"><primary>plugins</primary><secondary>NAnt</secondary></indexterm><ulink url="http://wiki.jenkins-ci.org/display/HUDSON/NAnt+Plugin">NAnt
      plugin</ulink>. Once you have installed the plugin and restarted
      Jenkins, go to the Configure System page and specify the NAnt
      installation directory in the Nant Builders section (see <xref linkend="fig-hudson-msbuild-config"/>).</para>
      <para>Now go to the Build section of your freestyle project and choose
      “Execute NAnt build” (see <xref linkend="fig-hudson-nant-step"/>). Here
      you specify your build script and the target you want to invoke. If you
      click on the “Advanced...” option, you can also set property values to
      be passed into the NAnt script.</para>
      <figure float="none" id="fig-hudson-nant-step">
        <title>A build step using NAnt</title>
        <mediaobject id="I_mediaobject5_d1e8388">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0544.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0544.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
    <sect2 id="sect-ruby-builds">
      <title>Building Projects with Ruby and Ruby on Rails</title>
      <para>Jenkins <indexterm class="startofrange" id="ch05-ruby1" significance="normal"><primary>freestyle build jobs</primary><secondary>Ruby and Ruby on Rails projects in</secondary></indexterm><indexterm class="startofrange" id="ch05-ruby2" significance="normal"><primary>Ruby applications</primary></indexterm><indexterm class="startofrange" id="ch05-ruby3" significance="normal"><primary>Ruby on Rails projects</primary></indexterm>makes an excellent choice when it comes to integrating CI
      into your Ruby and Ruby on Rails projects. The Rake Plugin lets you add
      Rake build steps to your build jobs. You can also use the Ruby Plugin
      lets you run Ruby scripts directly in your build job. Finally, the Ruby
      Metrics Plugin provides support for Ruby code quality metrics tools such
      as RCov, Rails stats, and Flog.</para>
      <para>Another invaluable tool in this area is
      <literal moreinfo="none">CI:Reporter</literal>. This library is an add-on to
      <literal moreinfo="none">Test::Unit</literal>, <literal moreinfo="none">RSpec</literal>, and
      <literal moreinfo="none">Cucumber</literal> that generates JUnit-compatible XML reports
      for your tests. As we will see, JUnit-compatible test results can be
      used directly by Jenkins to report on your test results. You would
      install CI:Reporter using Gem as illustrated here:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">sudo gem install ci_reporter</userinput>
Successfully installed ci_reporter-1.6.4
1 gem installed</screen>
      <para>Next, you will need to set this up in your Rakefile, by adding the
      following:</para>
      <programlisting id="I_programlisting5_d1e8431" format="linespecific">require 'rubygems'
gem 'ci_reporter'
require 'ci/reporter/rake/test_unit' # use this if you're using Test::Unit</programlisting>
      <para>In <xref linkend="chapter-code-quality"/>, we discuss integrating
      code quality metrics into your Jenkins builds. Jenkins also provides
      support for code coverage metrics in Ruby. The Ruby Metrics Plugin
      supports code coverage metrics using <command moreinfo="none">rcov</command> as well as general code statistics with
      <command moreinfo="none">Rails stats</command>. To install the <command moreinfo="none">rcov-plugin</command>, you will first need to run
      something along the following lines:</para>
      <screen format="linespecific">$ <userinput moreinfo="none">./script/plugin install http://svn.codahale.com/rails_rcov</userinput></screen>
      <para>Once this is set up, you will be able to display your test results
      and test result trend in Jenkins.</para>
      <para>Finally, you can configure a Rake build simply by using a Rake
      build step, as illustrated in <xref linkend="fig-hudson-rake-step"/>.</para>
      <figure float="none" id="fig-hudson-rake-step">
        <title>A build step using Rake</title>
        <mediaobject id="I_mediaobject5_d1e8459">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0545.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0545.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>You also need to configure Jenkins to report on the test and
      quality metrics results. You can do this by activating the “Publish
      JUnit test result report”, “Publish Rails stats report”, and “Public
      Rcov report” options (see <xref linkend="fig-hudson-rails-metrics"/>).
      The JUnit XML reports will be found in the <filename moreinfo="none">results</filename> directory (enter
      <userinput moreinfo="none">results/*.xml</userinput> in the “Test report XMLs” field),
      and the Rcov date<indexterm id="I_indexterm5_d1e8475" class="endofrange" startref="ch05-ruby1" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8477" class="endofrange" startref="ch05-ruby2" significance="normal"><primary/></indexterm><indexterm id="I_indexterm5_d1e8479" class="endofrange" startref="ch05-ruby3" significance="normal"><primary/></indexterm> in the <filename moreinfo="none">coverage/units</filename> directory.</para>
      <figure float="none" id="fig-hudson-rails-metrics">
        <title>Publishing code quality metrics for Ruby and Rails</title>
        <mediaobject id="I_mediaobject5_d1e8489">
          <imageobject role="print">
            <imagedata fileref="figs/print/jtdg_0546.pdf" format="PDF"/>
          </imageobject>
          <imageobject role="web">
            <imagedata fileref="figs/web/jtdg_0546.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>
  <sect1 id="sect-build-jobs-conclusion">
    <title>Conclusion</title>
    <para>In this chapter we have covered the basics of creating new build
    jobs for the most common cases you are likely to encounter. Later on in
    the book, we will build on these foundations to discuss more advanced
    options such as parameterized builds, matrix builds, and build promotion
    strategies.</para>
  </sect1>
</chapter>
