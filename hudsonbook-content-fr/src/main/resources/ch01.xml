<?xml version="1.0"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="intro">
  <title>Introduction à Jenkins</title>
  <sect1 id="I_sect11_d1e536">
    <title>Introduction</title>
    <para>L'Intégration Continue, aussi connue sous le terme <indexterm class="startofrange" id="ch01-ci" significance="normal"><primary>IC (Intégration Continue)</primary></indexterm><indexterm id="I_indexterm1_d1e544" significance="normal"><primary>Intégrtion Continue</primary><see>IC</see></indexterm>IC, est l'un des piliers du développement logiciel moderne. En fait,
    elle est un véritable tournant — quand l'Intégration Continue est mise en place dans 
    une organisation, elle change radicalement la manière dont les équipes 
    pensent le processus de développement. Elle est capable de permettre et
    d'induire toute une série d'améliorations et de transformations, depuis 
    le build régulier automatisé jsqu'à la livraison continue en production. Une
    bonne infrastructure d'IC peut fluidifier le processus de développement jusqu'au
    déploiement, aide à détecter et corriger les bogues plus rapidement, fournit
    un écran de contrôle très utile aux développeurs mais aussi aux non-développeurs, et
    poussée à l'extrême, elle permet aux équipes de fournir plus de valeur métier aux utilisateurs finaux.
    Toute équipe de développement professionnelle, quelque soit sa taille, devrait mettre en 
    œuvre l'IC.</para>
  </sect1>
  <sect1 id="intro-sect-intro">
    <title>Les fondamentaux de l'Intégration Continue</title>
    <para>A l'époque des projets en V et des diagrammes de Gantt, avant l'introduction des 
    pratiques de l'IC, une équipe de développement dépensait son temps et son énergie 
    sans compter durant la phase amenant à la livraison, appelée Phase d'Intégration. 
    Durant cette phase, toutes les modifications apportées au code par les développeurs ou de 
    petites équipes étaient rassemblées puis aggrégées et  fusionnées en un produit fonctionnel. 
    Ce travail était dur, intégrant ainsi des mois de modifications qui entraient en conflit. 
    Il était très difficile d'anticiper les problèmes qui allaient
    surgir, et encore plus de les corriger car cela impliquait de reprendre du code qui 
    avait été écrit des semaines, voire des mois auparavant. Ce douloureux processus, plein de
    risques et de dangers, amenait souvent des retards significatifs de livraison, des
    coûts supplémentaires et, au final, des clients mécontents. L'Intégration Continue est née
    comme une réponse à ces problèmes.</para>
    <para>L'Intégration Continue, dans sa forme la plus simple, se compose d'un outil
    qui surveille les modifications de code dans votre gestionnaire de configuration.
    Dès qu'un changement est détecté, cet outil va automatiquement compiler et tester
    votre application. Si la moindre erreur arrive alors l'outil va immédiatement avertir
    les développeurs afin qu'ils puissent immédiatement corriger le problème.</para>
    <para>Mais l'Intégration Continue est bien plus que cela. L'Intégration Continue
    peut aussi suivre la santé de votre code en surveillant la qualité du code et
    les métriques de couverture et ainsi aider à maintenir la dette technique 
    à un niveau bas et à abaisser les coûts de maintenance. Rendre visible publiquement
    les métriques de qualité de code encourage les développeurs à être fiers de la 
    qualité de leur code et à essayer de toujours l'améliorer. Combinée à une suite de tests
    d'acceptance automatisés, l'IC peut aussi se transformer en outil de communication en
    affichant une image claire de l'état des développements en cours. Et elle peut simplifier
    et accélerer la livraison en vous aidant à automatiser le processus de déploiement, vous
    permettant de déployer la dernière version de votre application soit automatiquement soit
    d'un simple clic.</para>
    <para>Dans le fond, l'Intégration Continue c'est réduire les risques en fournissant 
    des retours rapides. En premier lieu, de par sa conception, elle permet d'identifier et
    de corriger les problèmes d'intégration et les regressions plus rapidement ce qui 
    permet de livrer plus facilement, plus rapidement et avec moins de bogues.
    En donnant une meilleure visibilité sur l'état du projet à tous les membres de l'équipe,
    techniques comme non-techniques, l'Intégration Continue facilite la communication au sein de
    l'équipe et encourage la collaboration pour résoudre les problèmes ainsi que l'amélioration du
    processus. Et, en automatisant le processus de déploiement, l'Intégration Continue vous permet de
    mettre votre logiciel dans les mains des testeurs et des utilisateurs finaux plus rapidement,
    avec plus de fiabilité et avec moins d'efforts.</para>
    <para>Ce concept de déploiement automatisé est important. En effet, si vous poussez ce
    concept de déploiement automatisé à sa conclusion logique, vous pourriez mettre en
    production tout build qui passerait sans encombre les tests automatisés nécessaires.
    Cette pratique de déployer en production tous les builds ayant réussi est appelée 
    communément <indexterm id="I_indexterm1_d1e563" significance="normal"><primary>déploiement continu</primary></indexterm> <emphasis>Déploiement <phrase role="keep-together">Continu</phrase></emphasis>.</para>
    <para>Cependant, une approche pure du Déploiement Continu n'est pas toujours souhaitable.
    Par exemple, de nombreux utilisateurs n'apprécieraient pas d'avoir une nouvelle version
    disponible plusieurs fois par semaine et préfereraient un cycle de livraison plus 
    prévisible (et transparent). Des considérations commerciales et marketing peuvent 
    aussi entrer en compte pour déterminer quand une nouvelle version doit être déployée.</para>
    <para>La notion de <emphasis><indexterm id="I_indexterm1_d1e577" significance="normal"><primary>livraison continue</primary></indexterm>Livraison Continue</emphasis> est très proche de cette idée
    de Déploiement Continu en prenant en compte ces considérations. Lors d'une Livraison Continue tout
    build qui a réussi à passer les tests automatisés pertinents et les contrôles qualité 
    peut <emphasis>virtuellement</emphasis> être déployé en production au moyen d'un <phrase role="keep-together">processus</phrase> 
    lancé par un simple clic, et ainsi se retrouver dans les mains de l'utilisateur final en quelques minutes.
    Cependant, ce processus n'est pas automatique : c'est au métier, plutôt qu'à l'Informatique de 
    décider quel est le moment opportun pour livrer les dernières modifications.</para>
    <?dbfo-need height=”1in”?>
    <para>Ainsi les techniques d'Intégration Continue, et plus particulièrement 
    le Déploiement Continu et la Livraison Continue, permettent d'apporter la
    valeur à l'utilisateur final plus rapidement. Combien de temps faut-il à votre
    équipe pour mettre une petite modification du code en production ? Dans ce temps
    quelle est la part des problèmes qui auraient pu être corrigés plus tôt si vous
    aviez su quelles modifications faisait Joe au bout du couloir ? Quelle part
    est prise par le pénible travail des équipe de la qualité pour tester 
    manuellement ? Combien d'étapes manuelles, dont les secrets ne sont connus 
    que de quelques initiés seulement, sont nécessaires à un déploiement ? L'Intégration
    Continue n'est pas la solution miracle, elle permet de rationaliser certains de ces problèmes.</para>
    <para>Mais l'Intégration Continue est tout autant une mentalité que des outils.
    Pour tirer un maximum de profit de l'IC, une équipe doit adopter un
    comportement IC. Par exemple, vos projets doivent avoir un build fiable,
    reproductible et automatisé, sans intervention humaine. La correction les builds 
    en erreur devrait être une priorité absolue, et ne devrait pas être oubliée 
    dans un coin. Le processus de déploiement devrait être automatisé,
    sans étapes manuelles. Et puisque la confiance que vous mettez dans 
    votre serveur d'intégration dépend en grande partie de la qualité de 
    vos tests, l'équipe doit mettre l'accent sur la qualité des tests et 
    des pratiques associées.</para>
    <para>Dans ce livre nous verrons comment mettre en œuvre une solution
    d'Intégration Continue robuste et complète avec Jenkins<indexterm id="I_indexterm1_d1e596" class="endofrange" startref="ch01-ci" significance="normal"><primary/></indexterm> ou Hudson.</para>
  </sect1>
  <sect1 id="intro-sect-introducing-jenkins">
    <title>Introduction à Jenkins (né Hudson)</title>
    <para>Jenkins, <indexterm class="startofrange" id="ch01-jenkins" significance="normal"><primary>Jenkins</primary></indexterm>qui s'appelait à l'origine <indexterm id="I_indexterm1_d1e608" significance="normal"><primary>Hudson</primary><seealso>Jenkins</seealso></indexterm>Hudson, est un outil d'Intégration Continue 
    open source écrit en Java. Bénéficiant d'une part de marché dominante, 
    Jenkins est utilisé par des équipes de toutes tailles, pour des projets 
    dans des langages et des technologies variés, incluant .NET, Ruby, 
    Groovy, Grails, PHP et d'autres, ainsi que Java bien sûr. Qu'est ce 
    qui est à l'origine du succès de Jenkins ? Pourquoi utiliser Jenkins
    pour votre infrastructure d'IC ?</para>
    <para>Tout d'abord, Jenkins est facile à utiliser. L'interface utilisateur
    est simple, intuitive et visuellement agréable, et Jenkins dans son ensemble
    a une très petite courbe d'apprentissage. Comme nous le verrons dans 
    le chapitre suivant, vous pouvez démarrer avec jenkins en quelques 
    minutes.</para>
    <para>Cependant jenkins n'a pas sacrifié puissance ou extensibilité : il est aussi
    extrêmement flexible et s'adapte facilement à vos moindres désirs. Des 
    centaines d'extensions open source sont disponibles, et de nouvelles 
    aparaissent toutes les semaines. Ces extensions couvrent tout : les
    outils de gestion de configuration, les outils de build, les métriques de
    qualité de code, les annonceurs de build, l'intégration avec des 
    systèmes externes, la personalisation de l'interface utilisateur, des 
    jeux et bien d'autres fonctionnalités encore. Les installer est simple et rapide.</para>
    <para>Enfin, mais ce n'est pas négligeable, une bonne part de la 
    popularité de Jenkins vient de la taille <phrase role="keep-together">et</phrase> du
    dynamisme de sa communauté. La communauté Jenkins est immense, dynamique, 
    réactive et c'est un groupe <phrase role="keep-together">accueillant</phrase>, avec
    ses champions passionnés, ses listes de diffusion actives, ses canaux IRC et 
    son blog et son compte twitter très bruyants. Le rythme de développement
    est très intense, avec des livraisons hebdomadaires comportant les dernières
    évolutions, corrections et mises à jour des extensions.</para>
    <para>Cependant, Jenkins répond tout aussi bien aux attentes des utilisateurs qui ne 
    souhaitent pas mettre à jour toutes les semaines. Pour ceux qui veulent un rythme moins trépidant,
    il existe une version Long-term Support, ou <indexterm id="I_indexterm1_d1e628" significance="normal"><primary>livraisons LTS (Long-Term Support)</primary></indexterm>LTS, un ensemble
    de versions qui sont à la traine par rapport à la dernière en termes de nouveautés 
    mais qui apportent plus de stabilité et moins de changements. Les versions LTS
    sortent environ tous les trois mois, les correctifs importants y sont 
    intégrés. Ce concept est identique aux <phrase role="keep-together">versions</phrase> Ubuntu LTS .</para>
  </sect1>
  <sect1 id="intro-sect-history">
    <title>De Hudson à Jenkins — Un rapide historique</title>
    <para>Jenkins<indexterm class="startofrange" id="ch01-history" significance="normal"><primary>Jenkins</primary><secondary>historique</secondary></indexterm> est le produit d'un développeur visionnaire, <indexterm id="I_indexterm1_d1e646" significance="normal"><primary>Kawaguchi, Kohsuke (développeur d'Hudson)</primary></indexterm>Kohsuke Kawaguchi, qui a commencé ce projet comme un loisir sous le nom d'<indexterm id="I_indexterm1_d1e650" significance="normal"><primary>Hudson</primary></indexterm>Hudson à la fin de l'année 2004 alors qu'il travaillait chez Sun. Comme Hudson évoluait au cours des années, 
	il était de plus en plus utilisé par les équipes de Sun pour leurs propres projets. Début 2008, Sun reconnaissait la qualité et la valeur
	de cet outil et demandait à Kohsuke de travailler à plein temps sur Hudson, commençant ainsi à fournir des services professionnels et
	du support sur Hudson. En 2010, Hudson était dévenu la principale solution d'Intégration Continue avec une part de amrché d'environ 70%.</para>
    <para>En 2009, Oracle racheta Sun. Vers la fin 2010, des tensions apparurent entre la communauté de développeurs d'Hudson et Oracle, dont la source
		était les problèmes de l'infrastructure Java.net, aggravée par la politique d'Oracle au sujet de la marque Hudson.Ces tensions révélaient de profonds
		désaccords sur la gestion du projet par Oracle. En effet, Oracle voulait orienter le projet vers un processus de développement plus controlé, avec 
		des livraisons moins fréquentes, alors que le coeur des développeurs d'Hudson, mené par Kohsuke, preferait continuer à fonctionner selon le modèle 
		communautaire ouvert, flexible et rapide qui avait si bien fonctionné pour Hudson par le passé.</para>
    <para>En Janvier 2011, la communauté des développeurs Hudson vota pour renommer le projet en Jenkins. Par la suite ils migrèrent le code originel d'Hudson vers un nouveau
		<indexterm id="I_indexterm1_d1e658" significance="normal"><primary>projet Github</primary></indexterm><ulink url="https://github.com/jenkinsci">projet Github</ulink> 
		et y poursuivirent leur travail. La grande majorité des développeurs du coeur et des plugins leva le camp et suivit Kohsuke Kawaguchi et les autres principaux contributeurs
		dans le camp de Jenkins, où le gros de l'activité de développement peut être observée aujourd'hui.</para>
    <para>Après ce fork, la majorité des utilisateurs suivit la communauté des développeurs Jenkins et passa à Jenkins. AU moment où ces lignessont écrites, 
		les sondages montrent qu'environ 75% des utilisateurs d'Hudson sont passés à Jenkins, 13 % utilisent encore Hudson et 12% utilisent Jenkisn et Hudson ou
		sont en cours de migration vers Jenkins.</para>
    <para>Cependant, Oracle et Sonatype (la compagnie derière Maven et Nexus) ont poursuivi leur travail à partir du code d'Hudson (qui est maintenant lui aussi hébergé chez GitHub à <ulink url="https://github.com/hudson"/>), 
	mais selon un axe différent. En effet, les <indexterm id="I_indexterm1_d1e670" significance="normal"><primary>outils Sonatype</primary></indexterm>développeurs de Sonatype se sont concentrés sur 
	des modifications dans l'architecture, notamment sur l'intégration de Maven, leframework d'injection de dépendances, et l'<indexterm id="I_indexterm1_d1e674" class="endofrange" startref="ch01-jenkins" significance="normal"><primary/></indexterm><indexterm id="I_indexterm1_d1e676" class="endofrange" startref="ch01-history" significance="normal"><primary/></indexterm>architecture des plugins.</para>
  </sect1>
  <sect1 id="intro-sect-jenkins-or-hudson">
    <title>Dois-je utiliser Jenkins ou Hudson?</title>
    <para>Donc faut-il <indexterm id="I_indexterm1_d1e684" significance="normal"><primary>Jenkins</primary><secondary>raisons pour utiliser</secondary></indexterm>utiliser Jenkins ou Hudson ? Puisqu'il s'agit 
	ici d'un livre traitant de Jenkins, voici plusieurs raisons pour choisir Jenkins :</para>
    <itemizedlist>
      <listitem>
        <para><emphasis>Jenkins est le nouvel Hudson.</emphasis> En fait, Jenkins 
        est simplement le bon vieil Hudson renommé, donc si vous avez apprécié
        Hudson, vous aimerez Jenkins ! Jenkins utilise le code d'Hudson et
        l'équipe de développement ainsi que la philosophie du projet sont restées
        identiques. En résumé,  les développeurs initiaux qui ont écrit la plus grande partie
        du coeur d'Hudson, ont simplement continué en travaillant sur le projet Jenkins
        après la séparation.</para>
      </listitem>
      <listitem>
        <para><emphasis>La communauté <indexterm id="I_indexterm1_d1e700" significance="normal"><primary>Jenkins</primary><secondary>communauté de</secondary></indexterm>Jenkins</emphasis>. Comme de nombreux projets
        Open Source <indexterm id="I_indexterm1_d1e707" significance="normal"><primary>Jenkins</primary><secondary sortas="Open Source">comme un projet Open Source</secondary></indexterm>ayant du succès, la force
        d'Hudson venait de sa grande et dynamique communauté et de son adoption massive.
        Les bogues sont détéctés (et généralement corrigés) beaucoup plus rapidement, et
        si par malheur vous rencontrez un souci il y a de fortes chances que quelqu'un d'autre l'ait déjà
        rencontré ! Si vous avez un problème, écrivez une question sur la liste de diffusion ou sur le canal IRC —
        vous trouverez sûrement quelqu'un pour vous aider.</para>
      </listitem>
      <listitem>
        <para><emphasis>Le rythme de développement <indexterm id="I_indexterm1_d1e717" significance="normal"><primary>Jenkins</primary><secondary>cycle de livraisons rapide de</secondary></indexterm>intense</emphasis>. 
        Jenkins conserve la fréquence élévée des sorties typique d'Hudson et que de
        nombreux développeurs apprécient. Les nouvelles fonctionnalités, les nouveaux plugins
        et les corrections de bogues apparaissent hebdomadairement et le temps de correction
        des bogues est vraiment très court. Si, par contre, vous préferrez plus de stabilité, il y a toujours les versions LTS.</para>
      </listitem>
    </itemizedlist>
    <para>Et, <indexterm id="I_indexterm1_d1e726" significance="normal"><primary>Hudson</primary></indexterm>pour équilibrer les choses, voici quelques raisons qui peuvent vous faire préferrer Hudson :</para>
    <itemizedlist>
      <listitem>
        <para><emphasis>Siça fonctionne, ne le touchez pas.</emphasis> Vous
        avez déjà un Hudson installé dont vous êtes très satisfait et vous ne 
        ressentez pas le besoin d'installer la dernière version.</para>
      </listitem>
      <listitem>
        <para><emphasis>L'intégration professionnelle et <indexterm id="I_indexterm1_d1e740" significance="normal"><primary>outils Sonatype</primary></indexterm>les outils Sonatype.</emphasis> Hudson va probablement
        mettre l'accent sur son intégration avec des outils professionnels comme 
        <indexterm id="I_indexterm1_d1e745" significance="normal"><primary>LDAP/Active Directory</primary></indexterm>un annuaireLDAP/Active Director et les produits de Sonatype tels que
        <indexterm id="I_indexterm1_d1e749" significance="normal"><primary>Maven</primary><secondary>support d'Hudson pour</secondary></indexterm>Maven 3, <indexterm id="I_indexterm1_d1e755" significance="normal"><primary>Nexus</primary><secondary>support d'Hudson pour</secondary></indexterm>Nexus et <indexterm id="I_indexterm1_d1e761" significance="normal"><primary>M2Eclipse</primary></indexterm>M2Ecipse,alors que Jenkins
        sera plus ouvert à des outils concurrents comme  <indexterm id="I_indexterm1_d1e765" significance="normal"><primary>Artifactory</primary><secondary>support de Jenkins pour</secondary></indexterm>Artifactory et <indexterm id="I_indexterm1_d1e772" significance="normal"><primary>Gradle</primary><secondary>support de Jenkins pour</secondary></indexterm>Gradle.</para>
      </listitem>
      <listitem>
        <para><emphasis>L'architecture <indexterm id="I_indexterm1_d1e782" significance="normal"><primary>plugins</primary><secondary>architecture de, Jenkins comparé à Hudson</secondary></indexterm>des plugins.</emphasis> 
        Si vous avez l'intention d'écrire vos propres plugins Jenkins/Hudson plugins, il vous faut savoir 
        que Sonatype travaille  pour proposer une injection de dépendance JSR-330 pour les plugins
        d'Hudson. Les nouveaux développeurs peuvent trouver cette approche plus facile à utiliser 
        même si cela soulève des questions quant à la compatibilité entre Jenkins et Hudson.</para>
      </listitem>
    </itemizedlist>
    <para>La bonne nouvelle est que quelque soit l'outil que vous utilisiez entre Hudson et Jenkins, ils restent
    globalement très proches et la plupart des techniques et des astuces présentées dans ce livre
    seront valables sur les deux. En effet, pour illustrer ce point, de nombreuses captures d'écran
    dans ce livre font référence à Hudson plutôt qu'à Jenkins.</para>
  </sect1>
  <sect1 id="intro-sect-your-organization">
    <title>Mettre en place l'Intégration Continue au sein de votre organisation</title>
    <para>L'Intégration Coninue <indexterm class="startofrange" id="ch01-phases" significance="normal"><primary>IC (Intégration Continue)</primary></indexterm> n'est pas une histoire de tout ou rien. En fait,
    mettre en place l'IC au sein d'une organisation suit un chemin qui vous fera passer
    par différentes phases. A chacune de ces phases se rattachent des améliorations
    de l'infrastructure technique, mais aussi, et c'est peut-être le plus important,
    des améliorations des pratiques et de la culture de l'équipe de développement elle-même.
    Dans les paragraphes qui vont suivre j'ai essayé d'esquisser chacune de ces phases.</para>
    <sect2>
      <title>Phase 1 — Pas de serveur de build</title>
      <para>Au tout début, l'équipe n'a pas de serveur central <indexterm id="I_indexterm1_d1e805" significance="normal"><primary>serveur de build</primary></indexterm>de build quelqu'il soit. 
      Le logiciel est construit manuellement sur la machine du développeur, même si cela peut être réalisé par un script Ant ou equivalent.
      Le code source peut être enregistré dans un gestionnaire de configuration centralisé, mais les développeurs n'ont pas 
      l'habitude de commiter leurs modifications régulièrement.
      Peu de temp avant la prochine livraison prévue, un développeur intègre manuellement les modifications, une opération 
      qui produit beaucoup de peine et de soufffrance.</para>
    </sect2>
    <sect2>
      <title>Phase 2 — Builds quotidiens</title>
      <para>Dans cette phase, l'équipe possède un serveur de build et <indexterm id="I_indexterm1_d1e814" significance="normal"><primary>builds quotidiens automatisés</primary></indexterm><indexterm id="I_indexterm1_d1e817" significance="normal"><primary>builds quotidiens</primary><see>builds quotidiens automatisés</see></indexterm>builds automatisés 
      sont exécutés réguulièrement (générallement la nuit). Ce build compile tout simplement le code
      car il n'existe pas de tests unitaires pertinents et répétables. En effet, les tests automatisés,
      même s'ils sont écrits, ne font pas partie du processus de build, et peuvent ne pas s'exécuter correctement du tout.
      Cependant, maintenant les développeurs commitent leurs modifications régulièrement au moins à la fin de la journée.
      Si un développeur commite des modifications de code qui entrent en conflit avec le travail d'un autre développeur, le serveur de build
      avertit l'équipe par mail le lendemain matin. Toutefois, l'équipe ne se sert du
      serveur de build qu'à titre informatif — ils ne se sentent pas obligés de réparer un build en échec immédiatement, et le build peut 
      rester en échec pendant plusieurs jours sur le serveur de build.</para>
    </sect2>
    <sect2>
      <title>Phase 3 — Builds quotidiens et tests automatisés basiques</title>
      <para>L'équipe<indexterm id="I_indexterm1_d1e828" significance="normal"><primary>tests</primary><secondary>automatiser</secondary></indexterm> commence à prendre l'Intégration Continue et les tests
      au sérieux. Le serveur de build est configuré pour lancer un build dès qu'un nouveau code est commité
      dans l'outil de gestion de configuration et les membres de l'équipe peuvent facilement
      voir quelles sont les modifications du code qui correspondent à chaque build et de quel problème elles traitent. 
      A cela s'ajoute le fait que le script de build compile l'application et lance une série de tests unitaires ou d'intégration automatisés.
      En plus des emails, le serveur de build avertit aussi les membres de l'équipe des problèmes d'intégration en uitilisant des canaux plus
      proactifs tel que la messagerie instantanée. Les builds en echec sont maintenant réparés rapidement.</para>
    </sect2>
    <sect2>
      <title>Phase 4 — Arrivée des métriques</title>
      <para>Des métriques <indexterm id="I_indexterm1_d1e839" significance="normal"><primary>métriques de qualité de code</primary></indexterm><indexterm id="I_indexterm1_d1e842" significance="normal"><primary>métriques de couverture de code</primary></indexterm><indexterm id="I_indexterm1_d1e845" significance="normal"><primary>métriques</primary><see>rapports</see></indexterm><indexterm id="I_indexterm1_d1e850" significance="normal"><primary>rapports</primary><secondary>métriques de couverture de code</secondary></indexterm><indexterm id="I_indexterm1_d1e855" significance="normal"><primary>rapports</primary><secondary>métriques de qualité de code</secondary></indexterm>de qualité et de couverture de code automatisées sont maintenant mesurées pour aider à évaluer la qualité du code et (jusqu'à un certain point) la pertinence et l'efficacité des tests.
      Le build mesurant la qualité de code  produit aussi automatiquement la documentation de l'API de l'application.
      Tout ceci permet à l'équipe de maintenir un code de très bonne qualité, alertant les membres de l'équipe
      en cas de dérive des bonnes pratiques de tests. L'équipe a aussi monté un “build radiator”, un tableau de bord
      qui présente l'état du projet sur un écran visible de l'ensemble des membres de l'équipe.</para>
    </sect2>
    <sect2>
      <title>Phase 5 — Prendre les tests au sérieux</title>
      <para>Les <indexterm id="I_indexterm1_d1e866" significance="normal"><primary>développement piloté par les tests</primary></indexterm><indexterm id="I_indexterm1_d1e869" significance="normal"><primary>tests</primary><secondary>développement piloté par les tests</secondary></indexterm>bénéfices de l'Intégration Continue sont étroitement liés 
      à de solides pratiques de test. De nos jours, des techniques comme le développement piloté par les tests sont très utilisées ce qui améliore la
      confiance que l'on peut avoir dans le résultat d'un build automatisé. L'application n'est plus simplement compilée et testée,
      mais si les tests passent, elle est automatiquement déployée sur un serveur d'application pour des tests plus complets de bout en
      bout et des tests de performance.</para>
    </sect2>
    <sect2>
      <title>Phase 6 — Tests d'acceptance automatisés et un <phrase role="keep-together">déploiement</phrase> plus automatisé</title>
      <para>Le Développment piloté par les tests d'acceptance<indexterm id="I_indexterm1_d1e882" significance="normal"><primary>trests d'acceptance tests, automatisés</primary></indexterm><indexterm id="I_indexterm1_d1e885" significance="normal"><primary>développment piloté par les tests d'acceptance</primary></indexterm><indexterm id="I_indexterm1_d1e888" significance="normal"><primary>tests</primary><secondary>tests d'acceptance</secondary></indexterm><indexterm id="I_indexterm1_d1e893" significance="normal"><primary>tests</primary><secondary>automatisation</secondary></indexterm><indexterm id="I_indexterm1_d1e898" significance="normal"><primary>tests automatisés</primary><see>tests</see></indexterm> est utilisé, guidant 
      les efforts de développement et fournissant des rapports de haut niveau sur l'état du projet.
      Ces tests automatisés profitent des outils issus du monde du Développement piloté par le comportement (BDD)
      et du Développement piloté par les tests d'acceptance non seulment comme outils de tests mais aussi
      comme outils de communication et de documentation, en produisant des rapports de tests utilisant
      les termes métier qu'un non-développeur peut comprendre. Puisque ces tests de haut-niveau 
      sont automatisés dès le début du processus de développement, ils permettent de savoir
      très simplement quelles sont les fonctionnalités qui sont réalisées et celles qu'il reste à faire.
      L'application est automatiquement déployée sur un environnement de test pour l'équipe qualité (QA) 
      soit à chaque modification soit tous les soirs; une version peut être déployée (ou “promue”) pour des tests de conformité utilisateurs 
      et il est possible de la déployer dans des environnements de production au moyen d'un build lancé manuellement
      quand les testeurs la considère prête. L'équipe peut aussi utiliser le serveur de build pour revenir en arrière d'une version en cas 
      de catastrophe.</para>
    </sect2>
    <sect2>
      <title>Phase 7— Déploiement Continu</title>
      <para>La confiance<indexterm id="I_indexterm1_d1e909" significance="normal"><primary>déploiement continu</primary></indexterm> dans les tests unitaires, d'intégration et d'acceptance 
      automatisés est telle que les équipes peuvent utiliser les techniques de déploiement continu développées dans les phases précédentes pour pousser les modifications
      directement en production.</para>
      <?dbfo-need height=”1in”?>
      <para>La progression entre les niveaux décrite ici est approximative et peut ne pas correspondre exactement à des
        situations dans le monde réel. Par exemple, vous pouvez tout à fait introduire des tests de l'interface web avant de
        mettre en places les métriques de qualité de code et les rapports sur la couverture de code.
        Cependant, cela devrait vous donner une idée globale de la stratégie d'Intégration Continue à mettre en oeuvre dans une organisation du monde<indexterm id="I_indexterm1_d1e916" class="endofrange" startref="ch01-phases" significance="normal"><primary/></indexterm> réel.</para>
    </sect2>
  </sect1>
  <sect1 id="I_sect11_d1e919">
    <title>Et maintenant ?</title>
    <para>Tout au long du reste du livre, pendant que nous étudirons les différentes fonctionnalités de Jenkins 
        ainsi que les pratiques associées pour en profiter au maximum, nous verrons comment progresser 
        suivant ces différents niveaux avec Jenkins.Et souvenez-vous, la plupart es exemples de ce livre sont 
        disponibles en ligne (cf. <ulink url="http://www.wakaleo.com/books/jenkins-the-definitive-guide"/>
        pour plus d'informations), donc vous pouvez mettre les mains dans le cambouis vous aussi !</para>
  </sect1>
</chapter>
